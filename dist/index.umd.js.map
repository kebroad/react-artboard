{"version":3,"file":"index.umd.js","sources":["../src/tools/brush/brushHelpers.ts","../src/utils/cursors.ts","../src/tools/watercolor/watercolor.ts","../src/utils/pointUtils.ts","../src/components/Artboard.tsx","../src/history.ts","../src/tools/acrylic/useAcrylic.ts","../src/tools/airbrush/useAirbrush.ts","../src/tools/brush/useBrush.ts","../src/tools/calligraphy/useCalligraphy.ts","../src/tools/charcoal/useCharcoal.ts","../src/tools/crayon/useCrayon.ts","../src/tools/eraser/useEraser.ts","../src/tools/inkpen/useInkPen.ts","../src/tools/marker/useMarker.ts","../src/tools/oilpaint/useOilPaint.ts","../src/tools/pencil/usePencil.ts","../src/tools/shading/useShadingBrush.ts","../src/tools/smudge/useSmudge.ts","../src/tools/watercolor/useWatercolor.ts"],"sourcesContent":["import tinycolor from \"tinycolor2\";\nimport { Point } from \"../../utils/pointUtils\";\n\nexport function varyColour(\n  sourceColour: string,\n  varyBrightness: number\n): string {\n  const amount = Math.round(Math.random() * varyBrightness);\n  const alpha = 1 - Math.random() / 4;\n  const colour = tinycolor(sourceColour);\n  const varied = colour.darken(amount - varyBrightness / 2).setAlpha(alpha);\n  return varied.toPercentageRgbString();\n}\n\nexport interface Bristle {\n  distance: number;\n  thickness: number;\n  colour: string;\n}\n\nexport const rotatePoint = (\n  distance: number,\n  angle: number,\n  origin: Point\n): Point => [\n  origin[0] + distance * Math.cos(angle),\n  origin[1] + distance * Math.sin(angle),\n];\n\nexport const getBearing = (origin: Point, destination: Point): number =>\n  (Math.atan2(destination[1] - origin[1], destination[0] - origin[0]) -\n    Math.PI / 2) %\n  (Math.PI * 2);\n\nexport const getNewAngle = (\n  origin: Point,\n  destination: Point,\n  oldAngle?: number\n): number => {\n  const bearing = getBearing(origin, destination);\n  if (typeof oldAngle === \"undefined\") {\n    return bearing;\n  }\n  return oldAngle - angleDiff(oldAngle, bearing);\n};\n\nexport const angleDiff = (angleA: number, angleB: number): number => {\n  const twoPi = Math.PI * 2;\n  const diff =\n    ((angleA - (angleB > 0 ? angleB : angleB + twoPi) + Math.PI) % twoPi) -\n    Math.PI;\n  return diff < -Math.PI ? diff + twoPi : diff;\n};\n","export function circleSVG(diameter: number) {\n  return `<svg xmlns='http://www.w3.org/2000/svg' width='${diameter}' height='${diameter}' viewBox='0 0 ${diameter} ${diameter}'><circle r='${\n    diameter / 2\n  }' cy='${diameter / 2}' cx='${\n    diameter / 2\n  }' stroke-width='1' stroke='rgba(0,0,0,0.5)' fill='none'/></svg>`;\n}\n\nexport function circleDataUri(diameter: number) {\n  return `data:image/svg+xml;base64,${btoa(circleSVG(diameter))}`;\n}\n\nexport function circleCursor(diameter: number) {\n  return `url(${circleDataUri(diameter)}) ${diameter / 2} ${\n    diameter / 2\n  }, crosshair`;\n}\n","import { Point } from \"../../utils/pointUtils\";\n\nlet spareRandom: number | null = null;\n\n// https://gist.github.com/bluesmoon/7925696\nfunction normalRandom() {\n  let val, u, v, s, mul;\n  if (spareRandom !== null) {\n    val = spareRandom;\n    spareRandom = null;\n  } else {\n    do {\n      u = Math.random() * 2 - 1;\n      v = Math.random() * 2 - 1;\n      s = u * u + v * v;\n    } while (s === 0 || s >= 1);\n    mul = Math.sqrt((-2 * Math.log(s)) / s);\n    val = u * mul;\n    spareRandom = v * mul;\n  }\n  return val;\n}\nexport function makePolygon(\n  centre: Point,\n  sides: number,\n  radius: number\n): Array<Point> {\n  const increment = (Math.PI * 2) / sides;\n  const result: Array<Point> = [];\n  for (let i = 1; i <= sides; i++) {\n    result.push([\n      radius * Math.cos(increment * i) + centre[0],\n      radius * Math.sin(increment * i) + centre[1],\n    ]);\n  }\n  return result;\n}\n\nexport function deformPolygon(\n  points: Array<Point>,\n  depth: number,\n  variance: number,\n  vdiv: number\n): Array<Point> {\n  const newPoints: Array<Point> = [];\n  for (let i = 0; i < points.length; i++) {\n    const currentPoint = points[i];\n    const nextPoint = points[(i + 1) % points.length];\n    newPoints.push(currentPoint);\n    newPoints.push(\n      ...subdivideVertex(currentPoint, nextPoint, depth, variance, vdiv)\n    );\n  }\n  return newPoints;\n}\n\nfunction subdivideVertex(\n  currentPoint: Point,\n  nextPoint: Point,\n  depth: number,\n  variance: number,\n  vdiv: number\n): Array<Point> {\n  if (depth < 0) {\n    return [];\n  }\n  //   Find the midpoint\n  const midX = (currentPoint[0] + nextPoint[0]) / 2;\n  const midY = (currentPoint[1] + nextPoint[1]) / 2;\n\n  //   Nudge the midpoint\n  const newMidpoint: Point = [\n    midX + normalRandom() * variance,\n    midY + normalRandom() * variance,\n  ];\n\n  const newPoints = subdivideVertex(\n    currentPoint,\n    newMidpoint,\n    depth - 1,\n    variance / vdiv,\n    vdiv\n  );\n\n  newPoints.push(newMidpoint);\n  newPoints.push(\n    ...subdivideVertex(newMidpoint, nextPoint, depth - 1, variance / vdiv, vdiv)\n  );\n  return newPoints;\n}\n\nexport function getSplodge(\n  point: Point,\n  sides: number,\n  radius: number\n): Array<Point> {\n  return deformPolygon(makePolygon(point, sides, radius), 5, radius / 10, 2);\n}\n\nexport function splodgeAtPoint(\n  point: Point,\n  context: CanvasRenderingContext2D,\n  width: number\n): void {\n  context.beginPath();\n  getSplodge(point, Math.round(width / 5), width).forEach((point) => {\n    context.lineTo(...point);\n  });\n  context.closePath();\n  context.fill();\n}\n\nexport function splodgeTrail(\n  points: Array<Point>,\n  width: number,\n  trail: number,\n  context: CanvasRenderingContext2D\n): void {\n  const count = Math.min(trail, points.length / 3);\n  for (let i = 0; i < count; i++) {\n    context.globalAlpha = 0.01 - (0.009 / count) * i;\n    splodgeAtPoint(\n      points[points.length - i * 3 - 1],\n      context,\n      width + (width / count) * i\n    );\n  }\n  context.globalAlpha = 0.1;\n}\n","export type Point = [number, number];\n\nexport const getTouchPoint = (event: React.TouchEvent): Point => {\n  if (!event.currentTarget) {\n    return [0, 0];\n  }\n  const rect = event.currentTarget.getBoundingClientRect();\n  const touch = event.targetTouches[0];\n  return [touch.clientX - rect.left, touch.clientY - rect.top];\n};\n\nexport const getMousePoint = (event: React.MouseEvent): Point => [\n  event.nativeEvent.offsetX,\n  event.nativeEvent.offsetY,\n];\n\nconst BUTTON = 0b01;\nexport const mouseButtonIsDown = (buttons: number): boolean =>\n  (BUTTON & buttons) === BUTTON;\n","import React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useState,\n  useEffect,\n} from \"react\";\n\nimport { History } from \"../history\";\n\nimport {\n  getMousePoint,\n  getTouchPoint,\n  mouseButtonIsDown,\n  Point,\n} from \"../utils/pointUtils\";\n\nexport interface ArtboardProps\n  extends React.CanvasHTMLAttributes<HTMLCanvasElement> {\n  tool: ToolHandlers;\n  history?: History;\n  onStartStroke?: (point: Point) => void;\n  onContinueStroke?: (point: Point) => void;\n  onEndStroke?: () => void;\n}\n\nexport interface ArtboardRef {\n  download: (filename?: string, type?: string) => void;\n  getImageAsDataUri: (type?: string) => string | undefined;\n  clear: () => void;\n  context?: CanvasRenderingContext2D | null;\n}\n\nexport interface ToolHandlers {\n  name: string;\n  startStroke?: (point: Point, context: CanvasRenderingContext2D) => void;\n  continueStroke?: (point: Point, context: CanvasRenderingContext2D) => void;\n  endStroke?: (context: CanvasRenderingContext2D) => void;\n  cursor?: string;\n}\n\nexport const Artboard = forwardRef(function Artboard(\n  {\n    tool,\n    style,\n    history,\n    onStartStroke,\n    onContinueStroke,\n    onEndStroke,\n    ...props\n  }: ArtboardProps,\n  ref: ForwardedRef<ArtboardRef>\n) {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>();\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>();\n  const [drawing, setDrawing] = useState(false);\n\n  const startStroke = useCallback(\n    (point: Point) => {\n      if (!context) {\n        return;\n      }\n      context.save();\n      setDrawing(true);\n      tool.startStroke?.(point, context);\n      onStartStroke?.(point);\n    },\n    [tool, context, onStartStroke]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point) => {\n      if (!context) {\n        return;\n      }\n      tool.continueStroke?.(newPoint, context);\n      onContinueStroke?.(newPoint);\n    },\n    [tool, context, onContinueStroke]\n  );\n\n  const endStroke = useCallback(() => {\n    setDrawing(false);\n    if (context) {\n      tool.endStroke?.(context);\n      onEndStroke?.();\n      context.restore();\n      if (canvas && history) {\n        history.pushState(canvas);\n      }\n    }\n  }, [tool, context, canvas, history, onEndStroke]);\n\n  const mouseMove = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getMousePoint(event));\n    },\n    [continueStroke, drawing]\n  );\n\n  const touchMove = useCallback(\n    (event: React.TouchEvent) => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getTouchPoint(event));\n    },\n    [continueStroke, drawing]\n  );\n\n  const mouseDown = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (drawing) {\n        return;\n      }\n      event.preventDefault();\n      startStroke(getMousePoint(event));\n    },\n    [drawing, startStroke]\n  );\n\n  const touchStart = useCallback(\n    (event: React.TouchEvent) => {\n      if (drawing) {\n        return;\n      }\n      startStroke(getTouchPoint(event));\n    },\n    [drawing, startStroke]\n  );\n\n  const clear = useCallback(() => {\n    if (!context || !canvas) {\n      return;\n    }\n    context.save();\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    context.restore();\n    if (canvas && history) {\n      history.pushState(canvas);\n    }\n  }, [context, canvas, history]);\n\n  const gotRef = useCallback(\n    (canvasRef: HTMLCanvasElement) => {\n      if (!canvasRef) {\n        return;\n      }\n      canvasRef.width = canvasRef.offsetWidth;\n      canvasRef.height = canvasRef.offsetHeight;\n      const ctx = canvasRef.getContext(\"2d\");\n      setCanvas(canvasRef);\n      setContext(ctx);\n      if (!ctx) {\n        return;\n      }\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, canvasRef.width, canvasRef.height);\n      ctx.fillStyle = \"transparent\";\n      if (history) {\n        history.setContext(ctx);\n        history.pushState(canvasRef);\n      }\n    },\n    [history]\n  );\n\n  const mouseEnter = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      // If mouse button is down but we're not drawing, start a new stroke\n      if (mouseButtonIsDown(event.buttons) && !drawing) {\n        mouseDown(event);\n      }\n    },\n    [drawing, mouseDown]\n  );\n\n  const mouseLeave = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      // Don't end the stroke when leaving the canvas - let the global mouse handlers manage this\n      // This allows continuous drawing when moving outside and back into the canvas\n    },\n    []\n  );\n\n  // Add global mouse event listeners for better drawing experience\n  useEffect(() => {\n    if (!drawing || !canvas) {\n      return;\n    }\n\n    const handleGlobalMouseMove = (event: MouseEvent) => {\n      if (!drawing) {\n        return;\n      }\n      \n      const rect = canvas.getBoundingClientRect();\n      const point: Point = [\n        event.clientX - rect.left,\n        event.clientY - rect.top\n      ];\n      \n      // Only process global mouse events when outside the canvas bounds\n      // This prevents double processing when drawing inside the canvas\n      const isOutsideCanvas = point[0] < 0 || point[0] > canvas.width || \n                              point[1] < 0 || point[1] > canvas.height;\n      \n      if (isOutsideCanvas && \n          point[0] >= -50 && point[0] <= canvas.width + 50 && \n          point[1] >= -50 && point[1] <= canvas.height + 50) {\n        continueStroke(point);\n      }\n    };\n\n    const handleGlobalMouseUp = () => {\n      if (drawing) {\n        endStroke();\n      }\n    };\n\n    document.addEventListener('mousemove', handleGlobalMouseMove);\n    document.addEventListener('mouseup', handleGlobalMouseUp);\n\n    return () => {\n      document.removeEventListener('mousemove', handleGlobalMouseMove);\n      document.removeEventListener('mouseup', handleGlobalMouseUp);\n    };\n  }, [drawing, canvas, continueStroke, endStroke]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      download: (filename = \"image.png\", type?: string) => {\n        if (!canvas) {\n          return;\n        }\n        const a = document.createElement(\"a\");\n        a.href = canvas.toDataURL(type);\n        a.download = filename;\n        a.click();\n      },\n      clear,\n      getImageAsDataUri: (type?: string) => canvas?.toDataURL(type),\n      context,\n    }),\n    [canvas, context, clear]\n  );\n\n  return (\n    <canvas\n      style={{ cursor: tool?.cursor, touchAction: \"none\", ...style }}\n      onTouchStart={touchStart}\n      onMouseDown={mouseDown}\n      onMouseEnter={mouseEnter}\n      onMouseMove={drawing ? mouseMove : undefined}\n      onTouchMove={drawing ? touchMove : undefined}\n      onMouseUp={endStroke}\n      onMouseOut={mouseLeave}\n      onTouchEnd={endStroke}\n      ref={gotRef}\n      {...props}\n    />\n  );\n});\n","import { useCallback, useMemo, useRef, useState } from \"react\";\n\nasync function applyImage(context: CanvasRenderingContext2D, blob: Blob) {\n  const img = new Image();\n  img.onload = () => {\n    context.canvas.width = img.width;\n    context.canvas.height = img.height;\n    context.drawImage(img, 0, 0);\n    URL.revokeObjectURL(img.src);\n  };\n  img.src = URL.createObjectURL(blob);\n}\n\nexport interface History {\n  setContext: (context: CanvasRenderingContext2D) => void;\n  pushState: (canvas: HTMLCanvasElement) => Promise<boolean>;\n}\nexport interface HistoryHook {\n  history: History;\n\n  undo: () => Promise<boolean>;\n  redo: () => Promise<boolean>;\n  clear: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n}\n\nexport function useHistory(size?: number): HistoryHook {\n  const stack = useRef<Array<Blob>>([]);\n  const crs = useRef(0);\n  const [context, setContext] = useState<CanvasRenderingContext2D>();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  const pushState = useCallback(\n    async (canvas: HTMLCanvasElement) => {\n      const undoCursor = crs.current;\n      if (!context) {\n        console.error(\"Context not initialised\");\n        return false;\n      }\n      if (undoCursor !== 0) {\n        stack.current = stack.current.slice(0, -undoCursor);\n        crs.current = 0;\n      }\n      const blob = await new Promise<Blob | null>((resolve) =>\n        canvas.toBlob(resolve)\n      );\n      if (blob) {\n        stack.current.push(blob);\n      }\n      if (size && stack.current.length > size) {\n        stack.current = stack.current.slice(-size);\n      }\n      setCanUndo(stack.current.length > 1);\n      setCanRedo(false);\n      return true;\n    },\n    [crs, stack, context]\n  );\n  const undo = useCallback(async () => {\n    const undoCursor = crs.current;\n\n    if (!context) {\n      console.error(\"Context not initialised\");\n      return false;\n    }\n    if (undoCursor + 1 >= stack.current.length) {\n      console.log(\"nope\");\n      return false;\n    }\n\n    await applyImage(\n      context,\n      stack.current[stack.current.length - (undoCursor + 2)]\n    );\n    crs.current++;\n    setCanUndo(crs.current + 1 < stack.current.length);\n    setCanRedo(true);\n    return true;\n  }, [crs, stack, context]);\n\n  const redo = useCallback(async () => {\n    const undoCursor = crs.current;\n\n    if (!context) {\n      console.error(\"Context not initialised\");\n      return false;\n    }\n    if (undoCursor <= 0) {\n      return false;\n    }\n\n    await applyImage(context, stack.current[stack.current.length - undoCursor]);\n    crs.current--;\n    setCanUndo(crs.current + 1 < stack.current.length);\n    setCanRedo(crs.current > 0);\n    return true;\n  }, [stack, crs, context]);\n\n  const clear = useCallback(() => {\n    stack.current = [];\n  }, [stack]);\n\n  const history = useMemo<History>(\n    () => ({\n      setContext: (context: CanvasRenderingContext2D) => {\n        setContext(context);\n      },\n      pushState,\n    }),\n    [setContext, pushState]\n  );\n\n  return { history, undo, redo, clear, canUndo, canRedo };\n}\n","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseAcrylicProps {\n  color?: string;\n  strokeWidth?: number;\n  opacity?: number;\n}\n\nexport function useAcrylic({\n  color = \"#FF6B35\",\n  strokeWidth = 20,\n  opacity = 0.9,\n}: UseAcrylicProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = opacity;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"source-over\";\n      lastPoint.current = point;\n    },\n    [color, opacity]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create a solid, vibrant stroke with slight texture\n      context.beginPath();\n      context.lineWidth = strokeWidth;\n      \n      // Add slight texture variation\n      const textureVariation = (Math.random() - 0.5) * 2;\n      context.lineWidth = Math.max(1, strokeWidth + textureVariation);\n      \n      // Use bezier curves for smoother application\n      const controlPoint1X = lastPoint.current[0] + (point[0] - lastPoint.current[0]) * 0.3;\n      const controlPoint1Y = lastPoint.current[1] + (point[1] - lastPoint.current[1]) * 0.3;\n      const controlPoint2X = lastPoint.current[0] + (point[0] - lastPoint.current[0]) * 0.7;\n      const controlPoint2Y = lastPoint.current[1] + (point[1] - lastPoint.current[1]) * 0.7;\n      \n      context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n      context.bezierCurveTo(\n        controlPoint1X, controlPoint1Y,\n        controlPoint2X, controlPoint2Y,\n        point[0], point[1]\n      );\n      context.stroke();\n\n      // Add some paint buildup effect\n      if (Math.random() > 0.8) {\n        context.beginPath();\n        context.globalAlpha = opacity * 0.3;\n        context.lineWidth = strokeWidth * 0.6;\n        context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n        context.lineTo(point[0], point[1]);\n        context.stroke();\n        context.globalAlpha = opacity;\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, opacity]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Acrylic\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback } from \"react\";\nimport tinycolor from \"tinycolor2\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseAirbrushProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useAirbrush({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseAirbrushProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"darken\";\n      context.lineWidth = strokeWidth;\n      context.lineJoin = context.lineCap = \"round\";\n      context.strokeStyle = color;\n      context.shadowBlur = strokeWidth * 0.5;\n      context.shadowColor = tinycolor(color)\n        .setAlpha(0.5)\n        .toPercentageRgbString();\n      console.log(context.shadowColor);\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [color, strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    []\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Airbrush\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { useCallback, useRef, useState } from \"react\";\n\nimport { Bristle, getNewAngle, rotatePoint, varyColour } from \"./brushHelpers\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport type Brush = Array<Bristle>;\n\nfunction makeBrush(\n  strokeWidth: number,\n  colour: string,\n  varyBrightness: number\n): Brush {\n  const brush: Brush = [];\n  const bristleCount = Math.round(strokeWidth / 3);\n  const gap = strokeWidth / bristleCount;\n  for (let i = 0; i < bristleCount; i++) {\n    const distance =\n      i === 0 ? 0 : gap * i + (Math.random() * gap) / 2 - gap / 2;\n    brush.push({\n      distance,\n      thickness: Math.random() * 2 + 2,\n      colour: varyColour(colour, varyBrightness),\n    });\n  }\n  return brush;\n}\n\nconst strokeBristle = (\n  origin: Point,\n  destination: Point,\n  bristle: Bristle,\n  controlPoint: Point,\n  context: CanvasRenderingContext2D\n) => {\n  context.beginPath();\n  context.moveTo(origin[0], origin[1]);\n  context.strokeStyle = bristle.colour;\n  context.lineWidth = bristle.thickness;\n  context.lineCap = \"round\";\n  context.lineJoin = \"round\";\n  context.shadowColor = bristle.colour;\n  context.shadowBlur = bristle.thickness / 2;\n  context.quadraticCurveTo(\n    controlPoint[0],\n    controlPoint[1],\n    destination[0],\n    destination[1]\n  );\n  context.lineTo(destination[0], destination[1]);\n  context.stroke();\n};\n\nconst drawStroke = (\n  bristles: Brush,\n  origin: Point,\n  destination: Point,\n  oldAngle: number,\n  newAngle: number,\n  strokeWidth: number,\n  context: CanvasRenderingContext2D\n) => {\n  bristles.forEach((bristle) => {\n    context.beginPath();\n    const bristleOrigin = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      oldAngle,\n      origin\n    );\n\n    const bristleDestination = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      newAngle,\n      destination\n    );\n    const controlPoint = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      newAngle,\n      origin\n    );\n\n    strokeBristle(\n      bristleOrigin,\n      bristleDestination,\n      bristle,\n      controlPoint,\n      context\n    );\n  });\n};\n\nexport interface UseBrushProps {\n  color?: string;\n  strokeWidth?: number;\n  varyBrightness?: number;\n}\n\nexport function useBrush({\n  color = \"#000000\",\n  strokeWidth = 25,\n  varyBrightness = 5,\n}: UseBrushProps): ToolHandlers {\n  const [brush, setBrush] = useState<Brush>([]);\n  const currentAngle = useRef<number>();\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point) => {\n      currentAngle.current = undefined;\n      setBrush(makeBrush(strokeWidth, color, varyBrightness));\n      lastPoint.current = point;\n    },\n    [setBrush, strokeWidth, color, varyBrightness]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = newPoint;\n        return;\n      }\n      const newAngle = getNewAngle(\n        lastPoint.current,\n        newPoint,\n        currentAngle.current\n      );\n      if (typeof currentAngle.current === \"undefined\") {\n        currentAngle.current = newAngle % (Math.PI * 2);\n      }\n      drawStroke(\n        brush,\n        lastPoint.current,\n        newPoint,\n        currentAngle.current,\n        newAngle,\n        strokeWidth,\n        context\n      );\n      currentAngle.current = newAngle % (Math.PI * 2);\n      lastPoint.current = newPoint;\n    },\n    [brush, strokeWidth]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Paintbrush\", startStroke, continueStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseCalligraphyProps {\n  color?: string;\n  strokeWidth?: number;\n  angle?: number;\n}\n\nexport function useCalligraphy({\n  color = \"#000000\",\n  strokeWidth = 20,\n  angle = 45,\n}: UseCalligraphyProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n  const lastTime = useRef<number>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      lastPoint.current = point;\n      lastTime.current = Date.now();\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current || !lastTime.current) {\n        lastPoint.current = point;\n        lastTime.current = Date.now();\n        return;\n      }\n\n      const currentTime = Date.now();\n      const timeDelta = Math.max(currentTime - lastTime.current, 1);\n      \n      // Calculate speed and direction\n      const dx = point[0] - lastPoint.current[0];\n      const dy = point[1] - lastPoint.current[1];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = distance / timeDelta;\n      \n      // Calculate stroke angle relative to pen angle\n      const strokeAngle = Math.atan2(dy, dx);\n      const angleDiff = Math.abs(strokeAngle - (angle * Math.PI / 180));\n      const normalizedAngle = Math.min(angleDiff, Math.PI - angleDiff);\n      \n      // Vary width based on angle and speed\n      const angleMultiplier = Math.sin(normalizedAngle) * 0.8 + 0.2;\n      const speedMultiplier = Math.max(0.3, 1 - speed * 0.02);\n      const currentWidth = strokeWidth * angleMultiplier * speedMultiplier;\n\n      context.beginPath();\n      context.lineWidth = currentWidth;\n      context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n\n      lastPoint.current = point;\n      lastTime.current = currentTime;\n    },\n    [strokeWidth, angle]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Calligraphy\", startStroke, continueStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseCharcoalProps {\n  color?: string;\n  strokeWidth?: number;\n  roughness?: number;\n}\n\nexport function useCharcoal({\n  color = \"#1a1a1a\",\n  strokeWidth = 15,\n  roughness = 0.7,\n}: UseCharcoalProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = 0.6;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"multiply\";\n      lastPoint.current = point;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create multiple strokes for texture\n      const bristleCount = Math.floor(strokeWidth / 3);\n      for (let i = 0; i < bristleCount; i++) {\n        context.beginPath();\n        \n        // Random offset for each bristle\n        const offsetX = (Math.random() - 0.5) * strokeWidth * roughness;\n        const offsetY = (Math.random() - 0.5) * strokeWidth * roughness;\n        \n        // Vary line width for each bristle\n        context.lineWidth = Math.random() * 3 + 1;\n        \n        context.moveTo(\n          lastPoint.current[0] + offsetX,\n          lastPoint.current[1] + offsetY\n        );\n        context.lineTo(point[0] + offsetX, point[1] + offsetY);\n        context.stroke();\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, roughness]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Charcoal\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseCrayonProps {\n  color?: string;\n  strokeWidth?: number;\n  pressure?: number;\n}\n\nexport function useCrayon({\n  color = \"#DC143C\",\n  strokeWidth = 12,\n  pressure = 0.6,\n}: UseCrayonProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = pressure;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"multiply\";\n      lastPoint.current = point;\n    },\n    [color, pressure]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create waxy texture with multiple overlapping strokes\n      const textureStrokes = 8;\n      for (let i = 0; i < textureStrokes; i++) {\n        context.beginPath();\n        \n        // Random positioning for texture\n        const offsetRadius = strokeWidth * 0.4;\n        const angle = (i / textureStrokes) * Math.PI * 2;\n        const offsetX = Math.cos(angle) * offsetRadius * Math.random();\n        const offsetY = Math.sin(angle) * offsetRadius * Math.random();\n        \n        // Vary the stroke width for texture\n        context.lineWidth = Math.max(1, strokeWidth * (0.3 + Math.random() * 0.7));\n        \n        // Vary opacity for buildup effect\n        context.globalAlpha = pressure * (0.2 + Math.random() * 0.6);\n        \n        context.moveTo(\n          lastPoint.current[0] + offsetX,\n          lastPoint.current[1] + offsetY\n        );\n        context.lineTo(point[0] + offsetX, point[1] + offsetY);\n        context.stroke();\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, pressure]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Crayon\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback } from \"react\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseEraserProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useEraser({ strokeWidth = 25 }: UseEraserProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"source-over\";\n\n      context.lineWidth = strokeWidth;\n      context.strokeStyle = \"#ffffff\";\n      context.lineJoin = context.lineCap = \"round\";\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [strokeWidth]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    []\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Eraser\", startStroke, continueStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseInkPenProps {\n  color?: string;\n  strokeWidth?: number;\n  flow?: number;\n}\n\nexport function useInkPen({\n  color = \"#000080\",\n  strokeWidth = 4,\n  flow = 0.9,\n}: UseInkPenProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n  const pressure = useRef<number>(1);\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = flow;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.shadowColor = color;\n      context.shadowBlur = 1;\n      lastPoint.current = point;\n      pressure.current = 0.5;\n    },\n    [color, flow]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Simulate pressure based on speed\n      const dx = point[0] - lastPoint.current[0];\n      const dy = point[1] - lastPoint.current[1];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      // Smooth pressure changes\n      const targetPressure = Math.max(0.3, Math.min(1, 1 - distance * 0.01));\n      pressure.current = pressure.current * 0.7 + targetPressure * 0.3;\n\n      const currentWidth = strokeWidth * pressure.current;\n\n      context.beginPath();\n      context.lineWidth = currentWidth;\n      \n      // Use quadratic curves for smoother lines\n      const midX = (lastPoint.current[0] + point[0]) / 2;\n      const midY = (lastPoint.current[1] + point[1]) / 2;\n      \n      context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n      context.quadraticCurveTo(lastPoint.current[0], lastPoint.current[1], midX, midY);\n      context.stroke();\n\n      lastPoint.current = point;\n    },\n    [strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.shadowBlur = 0;\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Ink Pen\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\n\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseMarkerProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useMarker({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseMarkerProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineWidth = 3;\n      context.lineJoin = context.lineCap = \"round\";\n      lastPoint.current = point;\n      context.strokeStyle = color;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = newPoint;\n        return;\n      }\n      if (\n        lastPoint.current[0] === newPoint[0] &&\n        lastPoint.current[1] === newPoint[1]\n      ) {\n        return;\n      }\n      context.beginPath();\n\n      for (let i = 0; i < strokeWidth; i += 2) {\n        const offset = Math.round(strokeWidth / 2 - i);\n        context.globalAlpha = (1 / strokeWidth) * (strokeWidth - i);\n        context.moveTo(\n          lastPoint.current[0] - offset,\n          lastPoint.current[1] - offset\n        );\n        context.lineTo(newPoint[0] - offset, newPoint[1] - offset);\n        context.stroke();\n      }\n      context.globalAlpha = 1;\n      context.beginPath();\n\n      lastPoint.current = newPoint;\n    },\n    [strokeWidth, lastPoint]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Marker\", startStroke, continueStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\nimport tinycolor from \"tinycolor2\";\n\nexport interface UseOilPaintProps {\n  color?: string;\n  strokeWidth?: number;\n  blending?: number;\n}\n\nexport function useOilPaint({\n  color = \"#8B4513\",\n  strokeWidth = 25,\n  blending = 0.6,\n}: UseOilPaintProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = 0.8;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"source-over\";\n      lastPoint.current = point;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create multiple brush strokes with slight variations\n      const brushStrokes = 5;\n      for (let i = 0; i < brushStrokes; i++) {\n        context.beginPath();\n        \n        // Vary the color slightly for each stroke\n        const baseColor = tinycolor(color);\n        const variation = (Math.random() - 0.5) * 20;\n        const variedColor = baseColor.lighten(variation).toString();\n        \n        context.strokeStyle = variedColor;\n        context.lineWidth = strokeWidth + (Math.random() - 0.5) * 4;\n        \n        // Add random offset for texture\n        const offsetX = (Math.random() - 0.5) * strokeWidth * 0.3;\n        const offsetY = (Math.random() - 0.5) * strokeWidth * 0.3;\n        \n        context.moveTo(\n          lastPoint.current[0] + offsetX,\n          lastPoint.current[1] + offsetY\n        );\n        context.lineTo(point[0] + offsetX, point[1] + offsetY);\n        \n        // Use different blend modes for some strokes\n        if (i > 2) {\n          context.globalCompositeOperation = \"multiply\";\n          context.globalAlpha = blending * 0.5;\n        } else {\n          context.globalCompositeOperation = \"source-over\";\n          context.globalAlpha = 0.8;\n        }\n        \n        context.stroke();\n      }\n\n      lastPoint.current = point;\n    },\n    [color, strokeWidth, blending]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Oil Paint\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UsePencilProps {\n  color?: string;\n  strokeWidth?: number;\n  opacity?: number;\n}\n\nexport function usePencil({\n  color = \"#2c2c2c\",\n  strokeWidth = 3,\n  opacity = 0.8,\n}: UsePencilProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = opacity;\n      context.lineWidth = strokeWidth;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"multiply\";\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [color, strokeWidth, opacity]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      // Add some texture by varying the line width slightly\n      const variation = (Math.random() - 0.5) * 0.5;\n      context.lineWidth = strokeWidth + variation;\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    [strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Pencil\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport tinycolor from \"tinycolor2\";\n\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nexport interface UseShadingProps {\n  color?: string;\n  neighbourColor?: string;\n  neighbourStrokeWidth?: number;\n  distanceThreshold?: number;\n  spreadFactor?: number;\n}\n\nexport function useShadingBrush({\n  color = \"#000000\",\n  neighbourColor,\n  distanceThreshold = 40,\n  neighbourStrokeWidth = 1,\n  spreadFactor = 0.9,\n}: UseShadingProps): ToolHandlers {\n  neighbourColor ||= tinycolor(color).setAlpha(0.2).toPercentageRgbString();\n  const points = useRef<Array<Point>>([]);\n  const threshold = distanceThreshold * distanceThreshold;\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"darken\";\n      context.lineWidth = 1;\n      context.lineJoin = context.lineCap = \"round\";\n      points.current = [point];\n    },\n    []\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      context.strokeStyle = color;\n      context.lineWidth = 1;\n\n      points.current.push(newPoint);\n      context.beginPath();\n      const [prevX, prevY] = points.current[points.current.length - 2];\n      context.moveTo(prevX, prevY);\n      context.lineTo(...newPoint);\n      context.stroke();\n      context.lineWidth = neighbourStrokeWidth;\n\n      for (const point of points.current) {\n        const dx = point[0] - newPoint[0];\n        const dy = point[1] - newPoint[1];\n        const distance = dx * dx + dy * dy;\n\n        if (distance < threshold && Math.random() > distance / threshold) {\n          context.beginPath();\n          context.strokeStyle = neighbourColor as string;\n          context.moveTo(\n            newPoint[0] + dx * spreadFactor,\n            newPoint[1] + dy * spreadFactor\n          );\n          context.lineTo(\n            point[0] - dx * spreadFactor,\n            point[1] - dy * spreadFactor\n          );\n          context.stroke();\n        }\n      }\n    },\n    [neighbourStrokeWidth, color, spreadFactor, threshold, neighbourColor]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n  const cursor = \"crosshair\";\n\n  return { name: \"Shading\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseSmudgeProps {\n  strokeWidth?: number;\n  strength?: number;\n}\n\nexport function useSmudge({\n  strokeWidth = 30,\n  strength = 0.8,\n}: UseSmudgeProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n  const canvas = useRef<HTMLCanvasElement>();\n  const sourceImageData = useRef<ImageData>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      lastPoint.current = point;\n      canvas.current = context.canvas;\n      \n      // Capture the area around the starting point\n      const radius = strokeWidth;\n      const x = Math.max(0, point[0] - radius);\n      const y = Math.max(0, point[1] - radius);\n      const width = Math.min(canvas.current.width - x, radius * 2);\n      const height = Math.min(canvas.current.height - y, radius * 2);\n      \n      if (width > 0 && height > 0) {\n        sourceImageData.current = context.getImageData(x, y, width, height);\n      }\n    },\n    [strokeWidth]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current || !sourceImageData.current || !canvas.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      const dx = point[0] - lastPoint.current[0];\n      const dy = point[1] - lastPoint.current[1];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < 2) return; // Avoid too many small movements\n\n      // Create a temporary canvas for the smudge effect\n      const tempCanvas = document.createElement('canvas');\n      const tempContext = tempCanvas.getContext('2d');\n      if (!tempContext) return;\n\n      tempCanvas.width = strokeWidth * 2;\n      tempCanvas.height = strokeWidth * 2;\n\n      // Draw the source image data\n      tempContext.putImageData(sourceImageData.current, 0, 0);\n\n      // Apply the smudge by stretching the image\n      const stretchFactor = Math.min(distance * 0.1, strokeWidth * 0.5);\n      \n      context.globalAlpha = strength;\n      context.globalCompositeOperation = \"source-over\";\n      \n      // Draw multiple stretched versions for smooth blending\n      for (let i = 0; i < 5; i++) {\n        const factor = (i + 1) / 5;\n        const offsetX = dx * factor * 0.3;\n        const offsetY = dy * factor * 0.3;\n        \n        context.drawImage(\n          tempCanvas,\n          point[0] - strokeWidth + offsetX,\n          point[1] - strokeWidth + offsetY,\n          strokeWidth * 2,\n          strokeWidth * 2\n        );\n      }\n\n      // Update source image data for next stroke\n      const radius = strokeWidth;\n      const x = Math.max(0, point[0] - radius);\n      const y = Math.max(0, point[1] - radius);\n      const width = Math.min(canvas.current.width - x, radius * 2);\n      const height = Math.min(canvas.current.height - y, radius * 2);\n      \n      if (width > 0 && height > 0) {\n        sourceImageData.current = context.getImageData(x, y, width, height);\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, strength]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Smudge\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nimport { splodgeTrail } from \"./watercolor\";\n\nexport interface UseWatercolorProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useWatercolor({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseWatercolorProps): ToolHandlers {\n  const points = useRef<Array<Point>>([]);\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.fillStyle = color;\n      context.shadowColor = color;\n      context.globalAlpha = 0.01;\n      points.current = [point];\n      splodgeTrail(points.current, strokeWidth * 1.1, 1, context);\n    },\n    [color, strokeWidth]\n  );\n\n  const endStroke = useCallback(() => {\n    points.current = [];\n  }, []);\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      points.current.push(point);\n      splodgeTrail(points.current, strokeWidth, 5, context);\n    },\n    [strokeWidth]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Watercolor\", startStroke, continueStroke, endStroke, cursor };\n}\n"],"names":["varyColour","sourceColour","varyBrightness","amount","Math","round","random","alpha","tinycolor","darken","setAlpha","toPercentageRgbString","rotatePoint","distance","angle","origin","cos","sin","circleCursor","diameter","btoa","circleSVG","circleDataUri","spareRandom","normalRandom","val","u","v","s","mul","sqrt","log","subdivideVertex","currentPoint","nextPoint","depth","variance","vdiv","midY","newMidpoint","newPoints","push","splodgeAtPoint","point","context","width","beginPath","sides","radius","points","i","length","deformPolygon","centre","increment","PI","result","makePolygon","getSplodge","forEach","lineTo","closePath","fill","splodgeTrail","trail","count","min","globalAlpha","getTouchPoint","event","currentTarget","rect","getBoundingClientRect","touch","targetTouches","clientX","left","clientY","top","getMousePoint","nativeEvent","offsetX","offsetY","mouseButtonIsDown","buttons","Artboard","forwardRef","ref","tool","style","history","onStartStroke","onContinueStroke","onEndStroke","props","useState","setContext","canvas","setCanvas","drawing","setDrawing","startStroke","useCallback","save","continueStroke","newPoint","endStroke","restore","pushState","mouseMove","touchMove","mouseDown","preventDefault","touchStart","clear","fillStyle","fillRect","height","gotRef","canvasRef","offsetWidth","offsetHeight","ctx","getContext","mouseEnter","mouseLeave","useEffect","handleGlobalMouseMove","handleGlobalMouseUp","document","addEventListener","removeEventListener","useImperativeHandle","download","filename","type","a","createElement","href","toDataURL","click","getImageAsDataUri","_jsx","cursor","touchAction","onTouchStart","onMouseDown","onMouseEnter","onMouseMove","undefined","onTouchMove","onMouseUp","onMouseOut","onTouchEnd","applyImage","blob","img","Image","onload","drawImage","URL","revokeObjectURL","src","createObjectURL","color","strokeWidth","opacity","lastPoint","useRef","name","strokeStyle","lineCap","lineJoin","globalCompositeOperation","current","lineWidth","textureVariation","max","controlPoint1X","controlPoint1Y","controlPoint2X","controlPoint2Y","moveTo","bezierCurveTo","stroke","shadowBlur","shadowColor","console","brush","setBrush","currentAngle","colour","bristleCount","gap","thickness","makeBrush","newAngle","oldAngle","destination","bearing","atan2","angleB","twoPi","diff","bristles","bristle","controlPoint","quadraticCurveTo","strokeBristle","drawStroke","lastTime","Date","now","currentTime","timeDelta","dx","dy","speed","strokeAngle","angleDiff","abs","normalizedAngle","angleMultiplier","speedMultiplier","currentWidth","roughness","floor","pressure","offsetRadius","size","stack","crs","canUndo","setCanUndo","canRedo","setCanRedo","undoCursor","slice","Promise","resolve","toBlob","error","undo","redo","useMemo","flow","targetPressure","midX","offset","blending","baseColor","variation","variedColor","lighten","toString","neighbourColor","distanceThreshold","neighbourStrokeWidth","spreadFactor","threshold","strength","sourceImageData","x","y","getImageData","tempCanvas","tempContext","putImageData","factor"],"mappings":"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"}