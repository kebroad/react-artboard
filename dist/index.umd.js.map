{"version":3,"file":"index.umd.js","sources":["../src/tools/brush/brushHelpers.ts","../src/utils/cursors.ts","../src/tools/watercolor/watercolor.ts","../src/utils/pointUtils.ts","../src/components/Artboard.tsx","../src/history.ts","../src/tools/airbrush/useAirbrush.ts","../src/tools/brush/useBrush.ts","../src/tools/eraser/useEraser.ts","../src/tools/marker/useMarker.ts","../src/tools/shading/useShadingBrush.ts","../src/tools/watercolor/useWatercolor.ts"],"sourcesContent":["import tinycolor from \"tinycolor2\";\nimport { Point } from \"../../utils/pointUtils\";\n\nexport function varyColour(\n  sourceColour: string,\n  varyBrightness: number\n): string {\n  const amount = Math.round(Math.random() * varyBrightness);\n  const alpha = 1 - Math.random() / 4;\n  const colour = tinycolor(sourceColour);\n  const varied = colour.darken(amount - varyBrightness / 2).setAlpha(alpha);\n  return varied.toPercentageRgbString();\n}\n\nexport interface Bristle {\n  distance: number;\n  thickness: number;\n  colour: string;\n}\n\nexport const rotatePoint = (\n  distance: number,\n  angle: number,\n  origin: Point\n): Point => [\n  origin[0] + distance * Math.cos(angle),\n  origin[1] + distance * Math.sin(angle),\n];\n\nexport const getBearing = (origin: Point, destination: Point): number =>\n  (Math.atan2(destination[1] - origin[1], destination[0] - origin[0]) -\n    Math.PI / 2) %\n  (Math.PI * 2);\n\nexport const getNewAngle = (\n  origin: Point,\n  destination: Point,\n  oldAngle?: number\n): number => {\n  const bearing = getBearing(origin, destination);\n  if (typeof oldAngle === \"undefined\") {\n    return bearing;\n  }\n  return oldAngle - angleDiff(oldAngle, bearing);\n};\n\nexport const angleDiff = (angleA: number, angleB: number): number => {\n  const twoPi = Math.PI * 2;\n  const diff =\n    ((angleA - (angleB > 0 ? angleB : angleB + twoPi) + Math.PI) % twoPi) -\n    Math.PI;\n  return diff < -Math.PI ? diff + twoPi : diff;\n};\n","export function circleSVG(diameter: number) {\n  return `<svg xmlns='http://www.w3.org/2000/svg' width='${diameter}' height='${diameter}' viewBox='0 0 ${diameter} ${diameter}'><circle r='${\n    diameter / 2\n  }' cy='${diameter / 2}' cx='${\n    diameter / 2\n  }' stroke-width='1' stroke='rgba(0,0,0,0.5)' fill='none'/></svg>`;\n}\n\nexport function circleDataUri(diameter: number) {\n  return `data:image/svg+xml;base64,${btoa(circleSVG(diameter))}`;\n}\n\nexport function circleCursor(diameter: number) {\n  return `url(${circleDataUri(diameter)}) ${diameter / 2} ${\n    diameter / 2\n  }, crosshair`;\n}\n","import { Point } from \"../../utils/pointUtils\";\n\nlet spareRandom: number | null = null;\n\n// https://gist.github.com/bluesmoon/7925696\nfunction normalRandom() {\n  let val, u, v, s, mul;\n  if (spareRandom !== null) {\n    val = spareRandom;\n    spareRandom = null;\n  } else {\n    do {\n      u = Math.random() * 2 - 1;\n      v = Math.random() * 2 - 1;\n      s = u * u + v * v;\n    } while (s === 0 || s >= 1);\n    mul = Math.sqrt((-2 * Math.log(s)) / s);\n    val = u * mul;\n    spareRandom = v * mul;\n  }\n  return val;\n}\nexport function makePolygon(\n  centre: Point,\n  sides: number,\n  radius: number\n): Array<Point> {\n  const increment = (Math.PI * 2) / sides;\n  const result: Array<Point> = [];\n  for (let i = 1; i <= sides; i++) {\n    result.push([\n      radius * Math.cos(increment * i) + centre[0],\n      radius * Math.sin(increment * i) + centre[1],\n    ]);\n  }\n  return result;\n}\n\nexport function deformPolygon(\n  points: Array<Point>,\n  depth: number,\n  variance: number,\n  vdiv: number\n): Array<Point> {\n  const newPoints: Array<Point> = [];\n  for (let i = 0; i < points.length; i++) {\n    const currentPoint = points[i];\n    const nextPoint = points[(i + 1) % points.length];\n    newPoints.push(currentPoint);\n    newPoints.push(\n      ...subdivideVertex(currentPoint, nextPoint, depth, variance, vdiv)\n    );\n  }\n  return newPoints;\n}\n\nfunction subdivideVertex(\n  currentPoint: Point,\n  nextPoint: Point,\n  depth: number,\n  variance: number,\n  vdiv: number\n): Array<Point> {\n  if (depth < 0) {\n    return [];\n  }\n  //   Find the midpoint\n  const midX = (currentPoint[0] + nextPoint[0]) / 2;\n  const midY = (currentPoint[1] + nextPoint[1]) / 2;\n\n  //   Nudge the midpoint\n  const newMidpoint: Point = [\n    midX + normalRandom() * variance,\n    midY + normalRandom() * variance,\n  ];\n\n  const newPoints = subdivideVertex(\n    currentPoint,\n    newMidpoint,\n    depth - 1,\n    variance / vdiv,\n    vdiv\n  );\n\n  newPoints.push(newMidpoint);\n  newPoints.push(\n    ...subdivideVertex(newMidpoint, nextPoint, depth - 1, variance / vdiv, vdiv)\n  );\n  return newPoints;\n}\n\nexport function getSplodge(\n  point: Point,\n  sides: number,\n  radius: number\n): Array<Point> {\n  return deformPolygon(makePolygon(point, sides, radius), 5, radius / 10, 2);\n}\n\nexport function splodgeAtPoint(\n  point: Point,\n  context: CanvasRenderingContext2D,\n  width: number\n): void {\n  context.beginPath();\n  getSplodge(point, Math.round(width / 5), width).forEach((point) => {\n    context.lineTo(...point);\n  });\n  context.closePath();\n  context.fill();\n}\n\nexport function splodgeTrail(\n  points: Array<Point>,\n  width: number,\n  trail: number,\n  context: CanvasRenderingContext2D\n): void {\n  const count = Math.min(trail, points.length / 3);\n  for (let i = 0; i < count; i++) {\n    context.globalAlpha = 0.01 - (0.009 / count) * i;\n    splodgeAtPoint(\n      points[points.length - i * 3 - 1],\n      context,\n      width + (width / count) * i\n    );\n  }\n  context.globalAlpha = 0.1;\n}\n","export type Point = [number, number];\n\nexport const getTouchPoint = (event: React.TouchEvent): Point => {\n  if (!event.currentTarget) {\n    return [0, 0];\n  }\n  const rect = event.currentTarget.getBoundingClientRect();\n  const touch = event.targetTouches[0];\n  return [touch.clientX - rect.left, touch.clientY - rect.top];\n};\n\nexport const getMousePoint = (event: React.MouseEvent): Point => [\n  event.nativeEvent.offsetX,\n  event.nativeEvent.offsetY,\n];\n\nconst BUTTON = 0b01;\nexport const mouseButtonIsDown = (buttons: number): boolean =>\n  (BUTTON & buttons) === BUTTON;\n","import React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useState,\n  useEffect,\n} from \"react\";\n\nimport { History } from \"../history\";\n\nimport {\n  getMousePoint,\n  getTouchPoint,\n  mouseButtonIsDown,\n  Point,\n} from \"../utils/pointUtils\";\n\nexport interface ArtboardProps\n  extends React.CanvasHTMLAttributes<HTMLCanvasElement> {\n  tool: ToolHandlers;\n  history?: History;\n  onStartStroke?: (point: Point) => void;\n  onContinueStroke?: (point: Point) => void;\n  onEndStroke?: () => void;\n}\n\nexport interface ArtboardRef {\n  download: (filename?: string, type?: string) => void;\n  getImageAsDataUri: (type?: string) => string | undefined;\n  clear: () => void;\n  context?: CanvasRenderingContext2D | null;\n}\n\nexport interface ToolHandlers {\n  name: string;\n  startStroke?: (point: Point, context: CanvasRenderingContext2D) => void;\n  continueStroke?: (point: Point, context: CanvasRenderingContext2D) => void;\n  endStroke?: (context: CanvasRenderingContext2D) => void;\n  cursor?: string;\n}\n\nexport const Artboard = forwardRef(function Artboard(\n  {\n    tool,\n    style,\n    history,\n    onStartStroke,\n    onContinueStroke,\n    onEndStroke,\n    ...props\n  }: ArtboardProps,\n  ref: ForwardedRef<ArtboardRef>\n) {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>();\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>();\n  const [drawing, setDrawing] = useState(false);\n\n  const startStroke = useCallback(\n    (point: Point) => {\n      if (!context) {\n        return;\n      }\n      context.save();\n      setDrawing(true);\n      tool.startStroke?.(point, context);\n      onStartStroke?.(point);\n    },\n    [tool, context, onStartStroke]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point) => {\n      if (!context) {\n        return;\n      }\n      tool.continueStroke?.(newPoint, context);\n      onContinueStroke?.(newPoint);\n    },\n    [tool, context, onContinueStroke]\n  );\n\n  const endStroke = useCallback(() => {\n    setDrawing(false);\n    if (context) {\n      tool.endStroke?.(context);\n      onEndStroke?.();\n      context.restore();\n      if (canvas && history) {\n        history.pushState(canvas);\n      }\n    }\n  }, [tool, context, canvas, history, onEndStroke]);\n\n  const mouseMove = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getMousePoint(event));\n    },\n    [continueStroke, drawing]\n  );\n\n  const touchMove = useCallback(\n    (event: React.TouchEvent) => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getTouchPoint(event));\n    },\n    [continueStroke, drawing]\n  );\n\n  const mouseDown = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (drawing) {\n        return;\n      }\n      event.preventDefault();\n      startStroke(getMousePoint(event));\n    },\n    [drawing, startStroke]\n  );\n\n  const touchStart = useCallback(\n    (event: React.TouchEvent) => {\n      if (drawing) {\n        return;\n      }\n      startStroke(getTouchPoint(event));\n    },\n    [drawing, startStroke]\n  );\n\n  const clear = useCallback(() => {\n    if (!context || !canvas) {\n      return;\n    }\n    context.save();\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    context.restore();\n    if (canvas && history) {\n      history.pushState(canvas);\n    }\n  }, [context, canvas, history]);\n\n  const gotRef = useCallback(\n    (canvasRef: HTMLCanvasElement) => {\n      if (!canvasRef) {\n        return;\n      }\n      canvasRef.width = canvasRef.offsetWidth;\n      canvasRef.height = canvasRef.offsetHeight;\n      const ctx = canvasRef.getContext(\"2d\");\n      setCanvas(canvasRef);\n      setContext(ctx);\n      if (!ctx) {\n        return;\n      }\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, canvasRef.width, canvasRef.height);\n      ctx.fillStyle = \"transparent\";\n      if (history) {\n        history.setContext(ctx);\n        history.pushState(canvasRef);\n      }\n    },\n    [history]\n  );\n\n  const mouseEnter = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      // If mouse button is down but we're not drawing, start a new stroke\n      if (mouseButtonIsDown(event.buttons) && !drawing) {\n        mouseDown(event);\n      }\n    },\n    [drawing, mouseDown]\n  );\n\n  const mouseLeave = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      // Don't end the stroke when leaving the canvas - let the global mouse handlers manage this\n      // This allows continuous drawing when moving outside and back into the canvas\n    },\n    []\n  );\n\n  // Add global mouse event listeners for better drawing experience\n  useEffect(() => {\n    if (!drawing || !canvas) {\n      return;\n    }\n\n    const handleGlobalMouseMove = (event: MouseEvent) => {\n      if (!drawing) {\n        return;\n      }\n      \n      const rect = canvas.getBoundingClientRect();\n      const point: Point = [\n        event.clientX - rect.left,\n        event.clientY - rect.top\n      ];\n      \n      // Only process global mouse events when outside the canvas bounds\n      // This prevents double processing when drawing inside the canvas\n      const isOutsideCanvas = point[0] < 0 || point[0] > canvas.width || \n                              point[1] < 0 || point[1] > canvas.height;\n      \n      if (isOutsideCanvas && \n          point[0] >= -50 && point[0] <= canvas.width + 50 && \n          point[1] >= -50 && point[1] <= canvas.height + 50) {\n        continueStroke(point);\n      }\n    };\n\n    const handleGlobalMouseUp = () => {\n      if (drawing) {\n        endStroke();\n      }\n    };\n\n    document.addEventListener('mousemove', handleGlobalMouseMove);\n    document.addEventListener('mouseup', handleGlobalMouseUp);\n\n    return () => {\n      document.removeEventListener('mousemove', handleGlobalMouseMove);\n      document.removeEventListener('mouseup', handleGlobalMouseUp);\n    };\n  }, [drawing, canvas, continueStroke, endStroke]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      download: (filename = \"image.png\", type?: string) => {\n        if (!canvas) {\n          return;\n        }\n        const a = document.createElement(\"a\");\n        a.href = canvas.toDataURL(type);\n        a.download = filename;\n        a.click();\n      },\n      clear,\n      getImageAsDataUri: (type?: string) => canvas?.toDataURL(type),\n      context,\n    }),\n    [canvas, context, clear]\n  );\n\n  return (\n    <canvas\n      style={{ cursor: tool?.cursor, touchAction: \"none\", ...style }}\n      onTouchStart={touchStart}\n      onMouseDown={mouseDown}\n      onMouseEnter={mouseEnter}\n      onMouseMove={drawing ? mouseMove : undefined}\n      onTouchMove={drawing ? touchMove : undefined}\n      onMouseUp={endStroke}\n      onMouseOut={mouseLeave}\n      onTouchEnd={endStroke}\n      ref={gotRef}\n      {...props}\n    />\n  );\n});\n","import { useCallback, useMemo, useRef, useState } from \"react\";\n\nasync function applyImage(context: CanvasRenderingContext2D, blob: Blob) {\n  const img = new Image();\n  img.onload = () => {\n    context.canvas.width = img.width;\n    context.canvas.height = img.height;\n    context.drawImage(img, 0, 0);\n    URL.revokeObjectURL(img.src);\n  };\n  img.src = URL.createObjectURL(blob);\n}\n\nexport interface History {\n  setContext: (context: CanvasRenderingContext2D) => void;\n  pushState: (canvas: HTMLCanvasElement) => Promise<boolean>;\n}\nexport interface HistoryHook {\n  history: History;\n\n  undo: () => Promise<boolean>;\n  redo: () => Promise<boolean>;\n  clear: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n}\n\nexport function useHistory(size?: number): HistoryHook {\n  const stack = useRef<Array<Blob>>([]);\n  const crs = useRef(0);\n  const [context, setContext] = useState<CanvasRenderingContext2D>();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  const pushState = useCallback(\n    async (canvas: HTMLCanvasElement) => {\n      const undoCursor = crs.current;\n      if (!context) {\n        console.error(\"Context not initialised\");\n        return false;\n      }\n      if (undoCursor !== 0) {\n        stack.current = stack.current.slice(0, -undoCursor);\n        crs.current = 0;\n      }\n      const blob = await new Promise<Blob | null>((resolve) =>\n        canvas.toBlob(resolve)\n      );\n      if (blob) {\n        stack.current.push(blob);\n      }\n      if (size && stack.current.length > size) {\n        stack.current = stack.current.slice(-size);\n      }\n      setCanUndo(stack.current.length > 1);\n      setCanRedo(false);\n      return true;\n    },\n    [crs, stack, context]\n  );\n  const undo = useCallback(async () => {\n    const undoCursor = crs.current;\n\n    if (!context) {\n      console.error(\"Context not initialised\");\n      return false;\n    }\n    if (undoCursor + 1 >= stack.current.length) {\n      console.log(\"nope\");\n      return false;\n    }\n\n    await applyImage(\n      context,\n      stack.current[stack.current.length - (undoCursor + 2)]\n    );\n    crs.current++;\n    setCanUndo(crs.current + 1 < stack.current.length);\n    setCanRedo(true);\n    return true;\n  }, [crs, stack, context]);\n\n  const redo = useCallback(async () => {\n    const undoCursor = crs.current;\n\n    if (!context) {\n      console.error(\"Context not initialised\");\n      return false;\n    }\n    if (undoCursor <= 0) {\n      return false;\n    }\n\n    await applyImage(context, stack.current[stack.current.length - undoCursor]);\n    crs.current--;\n    setCanUndo(crs.current + 1 < stack.current.length);\n    setCanRedo(crs.current > 0);\n    return true;\n  }, [stack, crs, context]);\n\n  const clear = useCallback(() => {\n    stack.current = [];\n  }, [stack]);\n\n  const history = useMemo<History>(\n    () => ({\n      setContext: (context: CanvasRenderingContext2D) => {\n        setContext(context);\n      },\n      pushState,\n    }),\n    [setContext, pushState]\n  );\n\n  return { history, undo, redo, clear, canUndo, canRedo };\n}\n","import { useCallback } from \"react\";\nimport tinycolor from \"tinycolor2\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseAirbrushProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useAirbrush({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseAirbrushProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"darken\";\n      context.lineWidth = strokeWidth;\n      context.lineJoin = context.lineCap = \"round\";\n      context.strokeStyle = color;\n      context.shadowBlur = strokeWidth * 0.5;\n      context.shadowColor = tinycolor(color)\n        .setAlpha(0.5)\n        .toPercentageRgbString();\n      console.log(context.shadowColor);\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [color, strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    []\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Airbrush\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { useCallback, useRef, useState } from \"react\";\n\nimport { Bristle, getNewAngle, rotatePoint, varyColour } from \"./brushHelpers\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport type Brush = Array<Bristle>;\n\nfunction makeBrush(\n  strokeWidth: number,\n  colour: string,\n  varyBrightness: number\n): Brush {\n  const brush: Brush = [];\n  const bristleCount = Math.round(strokeWidth / 3);\n  const gap = strokeWidth / bristleCount;\n  for (let i = 0; i < bristleCount; i++) {\n    const distance =\n      i === 0 ? 0 : gap * i + (Math.random() * gap) / 2 - gap / 2;\n    brush.push({\n      distance,\n      thickness: Math.random() * 2 + 2,\n      colour: varyColour(colour, varyBrightness),\n    });\n  }\n  return brush;\n}\n\nconst strokeBristle = (\n  origin: Point,\n  destination: Point,\n  bristle: Bristle,\n  controlPoint: Point,\n  context: CanvasRenderingContext2D\n) => {\n  context.beginPath();\n  context.moveTo(origin[0], origin[1]);\n  context.strokeStyle = bristle.colour;\n  context.lineWidth = bristle.thickness;\n  context.lineCap = \"round\";\n  context.lineJoin = \"round\";\n  context.shadowColor = bristle.colour;\n  context.shadowBlur = bristle.thickness / 2;\n  context.quadraticCurveTo(\n    controlPoint[0],\n    controlPoint[1],\n    destination[0],\n    destination[1]\n  );\n  context.lineTo(destination[0], destination[1]);\n  context.stroke();\n};\n\nconst drawStroke = (\n  bristles: Brush,\n  origin: Point,\n  destination: Point,\n  oldAngle: number,\n  newAngle: number,\n  strokeWidth: number,\n  context: CanvasRenderingContext2D\n) => {\n  bristles.forEach((bristle) => {\n    context.beginPath();\n    const bristleOrigin = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      oldAngle,\n      origin\n    );\n\n    const bristleDestination = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      newAngle,\n      destination\n    );\n    const controlPoint = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      newAngle,\n      origin\n    );\n\n    strokeBristle(\n      bristleOrigin,\n      bristleDestination,\n      bristle,\n      controlPoint,\n      context\n    );\n  });\n};\n\nexport interface UseBrushProps {\n  color?: string;\n  strokeWidth?: number;\n  varyBrightness?: number;\n}\n\nexport function useBrush({\n  color = \"#000000\",\n  strokeWidth = 25,\n  varyBrightness = 5,\n}: UseBrushProps): ToolHandlers {\n  const [brush, setBrush] = useState<Brush>([]);\n  const currentAngle = useRef<number>();\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point) => {\n      currentAngle.current = undefined;\n      setBrush(makeBrush(strokeWidth, color, varyBrightness));\n      lastPoint.current = point;\n    },\n    [setBrush, strokeWidth, color, varyBrightness]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = newPoint;\n        return;\n      }\n      const newAngle = getNewAngle(\n        lastPoint.current,\n        newPoint,\n        currentAngle.current\n      );\n      if (typeof currentAngle.current === \"undefined\") {\n        currentAngle.current = newAngle % (Math.PI * 2);\n      }\n      drawStroke(\n        brush,\n        lastPoint.current,\n        newPoint,\n        currentAngle.current,\n        newAngle,\n        strokeWidth,\n        context\n      );\n      currentAngle.current = newAngle % (Math.PI * 2);\n      lastPoint.current = newPoint;\n    },\n    [brush, strokeWidth]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Paintbrush\", startStroke, continueStroke, cursor };\n}\n","import { useCallback } from \"react\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseEraserProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useEraser({ strokeWidth = 25 }: UseEraserProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"source-over\";\n\n      context.lineWidth = strokeWidth;\n      context.strokeStyle = \"#ffffff\";\n      context.lineJoin = context.lineCap = \"round\";\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [strokeWidth]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    []\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Eraser\", startStroke, continueStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\n\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseMarkerProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useMarker({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseMarkerProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineWidth = 3;\n      context.lineJoin = context.lineCap = \"round\";\n      lastPoint.current = point;\n      context.strokeStyle = color;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = newPoint;\n        return;\n      }\n      if (\n        lastPoint.current[0] === newPoint[0] &&\n        lastPoint.current[1] === newPoint[1]\n      ) {\n        return;\n      }\n      context.beginPath();\n\n      for (let i = 0; i < strokeWidth; i += 2) {\n        const offset = Math.round(strokeWidth / 2 - i);\n        context.globalAlpha = (1 / strokeWidth) * (strokeWidth - i);\n        context.moveTo(\n          lastPoint.current[0] - offset,\n          lastPoint.current[1] - offset\n        );\n        context.lineTo(newPoint[0] - offset, newPoint[1] - offset);\n        context.stroke();\n      }\n      context.globalAlpha = 1;\n      context.beginPath();\n\n      lastPoint.current = newPoint;\n    },\n    [strokeWidth, lastPoint]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Marker pen\", startStroke, continueStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport tinycolor from \"tinycolor2\";\n\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nexport interface UseShadingProps {\n  color?: string;\n  neighbourColor?: string;\n  neighbourStrokeWidth?: number;\n  distanceThreshold?: number;\n  spreadFactor?: number;\n}\n\nexport function useShadingBrush({\n  color = \"#000000\",\n  neighbourColor,\n  distanceThreshold = 40,\n  neighbourStrokeWidth = 1,\n  spreadFactor = 0.9,\n}: UseShadingProps): ToolHandlers {\n  neighbourColor ||= tinycolor(color).setAlpha(0.2).toPercentageRgbString();\n  const points = useRef<Array<Point>>([]);\n  const threshold = distanceThreshold * distanceThreshold;\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"darken\";\n      context.lineWidth = 1;\n      context.lineJoin = context.lineCap = \"round\";\n      points.current = [point];\n    },\n    []\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      context.strokeStyle = color;\n      context.lineWidth = 1;\n\n      points.current.push(newPoint);\n      context.beginPath();\n      const [prevX, prevY] = points.current[points.current.length - 2];\n      context.moveTo(prevX, prevY);\n      context.lineTo(...newPoint);\n      context.stroke();\n      context.lineWidth = neighbourStrokeWidth;\n\n      for (const point of points.current) {\n        const dx = point[0] - newPoint[0];\n        const dy = point[1] - newPoint[1];\n        const distance = dx * dx + dy * dy;\n\n        if (distance < threshold && Math.random() > distance / threshold) {\n          context.beginPath();\n          context.strokeStyle = neighbourColor as string;\n          context.moveTo(\n            newPoint[0] + dx * spreadFactor,\n            newPoint[1] + dy * spreadFactor\n          );\n          context.lineTo(\n            point[0] - dx * spreadFactor,\n            point[1] - dy * spreadFactor\n          );\n          context.stroke();\n        }\n      }\n    },\n    [neighbourStrokeWidth, color, spreadFactor, threshold, neighbourColor]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n  const cursor = \"crosshair\";\n\n  return { name: \"Shading\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nimport { splodgeTrail } from \"./watercolor\";\n\nexport interface UseWatercolorProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useWatercolor({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseWatercolorProps): ToolHandlers {\n  const points = useRef<Array<Point>>([]);\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.fillStyle = color;\n      context.shadowColor = color;\n      context.globalAlpha = 0.01;\n      points.current = [point];\n      splodgeTrail(points.current, strokeWidth * 1.1, 1, context);\n    },\n    [color, strokeWidth]\n  );\n\n  const endStroke = useCallback(() => {\n    points.current = [];\n  }, []);\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      points.current.push(point);\n      splodgeTrail(points.current, strokeWidth, 5, context);\n    },\n    [strokeWidth]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Watercolor\", startStroke, continueStroke, endStroke, cursor };\n}\n"],"names":["varyColour","sourceColour","varyBrightness","amount","Math","round","random","alpha","tinycolor","darken","setAlpha","toPercentageRgbString","rotatePoint","distance","angle","origin","cos","sin","circleCursor","diameter","btoa","circleSVG","circleDataUri","spareRandom","normalRandom","val","u","v","s","mul","sqrt","log","subdivideVertex","currentPoint","nextPoint","depth","variance","vdiv","midY","newMidpoint","newPoints","push","splodgeAtPoint","point","context","width","beginPath","sides","radius","points","i","length","deformPolygon","centre","increment","PI","result","makePolygon","getSplodge","forEach","lineTo","closePath","fill","splodgeTrail","trail","count","min","globalAlpha","getTouchPoint","event","currentTarget","rect","getBoundingClientRect","touch","targetTouches","clientX","left","clientY","top","getMousePoint","nativeEvent","offsetX","offsetY","mouseButtonIsDown","buttons","Artboard","forwardRef","ref","tool","style","history","onStartStroke","onContinueStroke","onEndStroke","props","useState","setContext","canvas","setCanvas","drawing","setDrawing","startStroke","useCallback","save","continueStroke","newPoint","endStroke","restore","pushState","mouseMove","touchMove","mouseDown","preventDefault","touchStart","clear","fillStyle","fillRect","height","gotRef","canvasRef","offsetWidth","offsetHeight","ctx","getContext","mouseEnter","mouseLeave","useEffect","handleGlobalMouseMove","handleGlobalMouseUp","document","addEventListener","removeEventListener","useImperativeHandle","download","filename","type","a","createElement","href","toDataURL","click","getImageAsDataUri","_jsx","cursor","touchAction","onTouchStart","onMouseDown","onMouseEnter","onMouseMove","undefined","onTouchMove","onMouseUp","onMouseOut","onTouchEnd","applyImage","blob","img","Image","onload","drawImage","URL","revokeObjectURL","src","createObjectURL","color","strokeWidth","globalCompositeOperation","lineWidth","lineJoin","lineCap","strokeStyle","shadowBlur","shadowColor","console","moveTo","name","stroke","brush","setBrush","currentAngle","useRef","lastPoint","current","colour","bristleCount","gap","thickness","makeBrush","newAngle","oldAngle","destination","bearing","atan2","angleB","twoPi","diff","bristles","bristle","controlPoint","quadraticCurveTo","strokeBristle","drawStroke","size","stack","crs","canUndo","setCanUndo","canRedo","setCanRedo","undoCursor","slice","Promise","resolve","toBlob","error","undo","redo","useMemo","offset","neighbourColor","distanceThreshold","neighbourStrokeWidth","spreadFactor","threshold","dx","dy"],"mappings":"wdAGgBA,EACdC,EACAC,GAEA,IAAMC,EAASC,KAAKC,MAAMD,KAAKE,SAAWJ,GACpCK,EAAQ,EAAIH,KAAKE,SAAW,EAGlC,OAFeE,UAAUP,GACHQ,OAAON,EAASD,EAAiB,GAAGQ,SAASH,GACrDI,4BASHC,EAAc,SACzBC,EACAC,EACAC,SACU,CACVA,EAAO,GAAKF,EAAWT,KAAKY,IAAIF,GAChCC,EAAO,GAAKF,EAAWT,KAAKa,IAAIH,cCdlBI,EAAaC,GAC3B,sBAL4BA,GAC5B,mCAAoCC,cATZD,GACxB,wDAAyDA,eAAqBA,oBAA0BA,MAAYA,kBAClHA,EAAW,WACJA,EAAW,WAClBA,EAAW,oEAK4BE,CAAUF,IAIrCG,CAAcH,QAAcA,EAAW,MACnDA,EAAW,yUCZf,IAAII,EAA6B,KAGjC,SAASC,IACP,IAAIC,EAAKC,EAAGC,EAAGC,EAAGC,EAClB,GAAoB,OAAhBN,EACFE,EAAMF,EACNA,EAAc,SACT,CACL,GAGEK,GAFAF,EAAoB,EAAhBtB,KAAKE,SAAe,GAEhBoB,GADRC,EAAoB,EAAhBvB,KAAKE,SAAe,GACRqB,QACH,IAANC,GAAWA,GAAK,GAEzBH,EAAMC,GADNG,EAAMzB,KAAK0B,MAAO,EAAI1B,KAAK2B,IAAIH,GAAMA,IAErCL,EAAcI,EAAIE,EAEpB,OAAOJ,EAoCT,SAASO,EACPC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIF,EAAQ,EACV,MAAO,GAGT,IACMG,GAAQL,EAAa,GAAKC,EAAU,IAAM,EAG1CK,EAAqB,EAJbN,EAAa,GAAKC,EAAU,IAAM,EAKvCV,IAAiBY,EACxBE,EAAOd,IAAiBY,GAGpBI,EAAYR,EAChBC,EACAM,EACAJ,EAAQ,EACRC,EAAWC,EACXA,GAOF,OAJAG,EAAUC,KAAKF,GACfC,EAAUC,WAAVD,EACKR,EAAgBO,EAAaL,EAAWC,EAAQ,EAAGC,EAAWC,EAAMA,IAElEG,WAWOE,EACdC,EACAC,EACAC,GAEAD,EAAQE,qBAZRH,EACAI,EACAC,GAEA,gBAzDAC,EACAd,EACAC,EACAC,GAGA,IADA,IAAMG,EAA0B,GACvBU,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAAK,CACtC,IAAMjB,EAAegB,EAAOC,GACtBhB,EAAYe,GAAQC,EAAI,GAAKD,EAAOE,QAC1CX,EAAUC,KAAKR,GACfO,EAAUC,WAAVD,EACKR,EAAgBC,EAAcC,EA8CmB,EA9CDE,EA8CiB,IA3CxE,OAAOI,EA2CAY,UAzEPC,EACAN,EACAC,GAIA,IAFA,IAAMM,EAAuB,EAAVlD,KAAKmD,GAAUR,EAC5BS,EAAuB,GACpBN,EAAI,EAAGA,GAAKH,EAAOG,IAC1BM,EAAOf,KAAK,CACVO,EAAS5C,KAAKY,IAAIsC,EAAYJ,GAAKG,EAAO,GAC1CL,EAAS5C,KAAKa,IAAIqC,EAAYJ,GAAKG,EAAO,KAG9C,OAAOG,EA6DcC,CAAYd,EAAOI,EAAOC,GAAS,EAAGA,EAAS,IASpEU,CAAWf,EAAOvC,KAAKC,MAAMwC,EAAQ,GAAIA,GAAOc,QAAQ,SAAChB,GACvDC,EAAQgB,aAARhB,EAAkBD,KAEpBC,EAAQiB,YACRjB,EAAQkB,gBAGMC,EACdd,EACAJ,EACAmB,EACApB,GAGA,IADA,IAAMqB,EAAQ7D,KAAK8D,IAAIF,EAAOf,EAAOE,OAAS,GACrCD,EAAI,EAAGA,EAAIe,EAAOf,IACzBN,EAAQuB,YAAc,IAAQ,KAAQF,EAASf,EAC/CR,EACEO,EAAOA,EAAOE,OAAa,EAAJD,EAAQ,GAC/BN,EACAC,EAASA,EAAQoB,EAASf,GAG9BN,EAAQuB,YAAc,OC7HXC,EAAgB,SAACC,GAC5B,IAAKA,EAAMC,cACT,MAAO,CAAC,EAAG,GAEb,IAAMC,EAAOF,EAAMC,cAAcE,wBAC3BC,EAAQJ,EAAMK,cAAc,GAClC,MAAO,CAACD,EAAME,QAAUJ,EAAKK,KAAMH,EAAMI,QAAUN,EAAKO,MAG7CC,EAAgB,SAACV,SAAmC,CAC/DA,EAAMW,YAAYC,QAClBZ,EAAMW,YAAYE,UAIPC,EAAoB,SAACC,UADnB,IAAA,EAEHA,ICwBCC,EAAWC,aAAW,WAUjCC,OAREC,IAAAA,KACAC,IAAAA,MACAC,IAAAA,QACAC,IAAAA,cACAC,IAAAA,iBACAC,IAAAA,YACGC,sNAIyBC,aAAvBnD,OAASoD,SACYD,aAArBE,OAAQC,SACeH,YAAS,GAAhCI,OAASC,OAEVC,EAAcC,cAClB,SAAC3D,GACMC,IAGLA,EAAQ2D,OACRH,GAAW,SACXZ,EAAKa,aAALb,EAAKa,YAAc1D,EAAOC,SAC1B+C,GAAAA,EAAgBhD,KAElB,CAAC6C,EAAM5C,EAAS+C,IAGZa,EAAiBF,cACrB,SAACG,GACM7D,UAGL4C,EAAKgB,gBAALhB,EAAKgB,eAAiBC,EAAU7D,SAChCgD,GAAAA,EAAmBa,KAErB,CAACjB,EAAM5C,EAASgD,IAGZc,EAAYJ,cAAY,WAC5BF,GAAW,GACPxD,UACF4C,EAAKkB,WAALlB,EAAKkB,UAAY9D,SACjBiD,GAAAA,IACAjD,EAAQ+D,UACJV,GAAUP,GACZA,EAAQkB,UAAUX,KAGrB,CAACT,EAAM5C,EAASqD,EAAQP,EAASG,IAE9BgB,EAAYP,cAChB,SAACjC,GACM8B,GAGLK,EAAezB,EAAcV,KAE/B,CAACmC,EAAgBL,IAGbW,EAAYR,cAChB,SAACjC,GACM8B,GAGLK,EAAepC,EAAcC,KAE/B,CAACmC,EAAgBL,IAGbY,EAAYT,cAChB,SAACjC,GACK8B,IAGJ9B,EAAM2C,iBACNX,EAAYtB,EAAcV,MAE5B,CAAC8B,EAASE,IAGNY,EAAaX,cACjB,SAACjC,GACK8B,GAGJE,EAAYjC,EAAcC,KAE5B,CAAC8B,EAASE,IAGNa,EAAQZ,cAAY,WACnB1D,GAAYqD,IAGjBrD,EAAQ2D,OACR3D,EAAQuE,UAAY,UACpBvE,EAAQwE,SAAS,EAAG,EAAGnB,EAAOpD,MAAOoD,EAAOoB,QAC5CzE,EAAQ+D,UACJV,GAAUP,GACZA,EAAQkB,UAAUX,KAEnB,CAACrD,EAASqD,EAAQP,IAEf4B,EAAShB,cACb,SAACiB,GACC,GAAKA,EAAL,CAGAA,EAAU1E,MAAQ0E,EAAUC,YAC5BD,EAAUF,OAASE,EAAUE,aAC7B,IAAMC,EAAMH,EAAUI,WAAW,MACjCzB,EAAUqB,GACVvB,EAAW0B,GACNA,IAGLA,EAAIP,UAAY,UAChBO,EAAIN,SAAS,EAAG,EAAGG,EAAU1E,MAAO0E,EAAUF,QAC9CK,EAAIP,UAAY,cACZzB,IACFA,EAAQM,WAAW0B,GACnBhC,EAAQkB,UAAUW,OAGtB,CAAC7B,IAGGkC,EAAatB,cACjB,SAACjC,GAEKc,EAAkBd,EAAMe,WAAae,GACvCY,EAAU1C,IAGd,CAAC8B,EAASY,IAGNc,EAAavB,cACjB,SAACjC,KAID,IAkEF,OA9DAyD,YAAU,WACR,GAAK3B,GAAYF,EAAjB,CAIA,IAAM8B,EAAwB,SAAC1D,GAC7B,GAAK8B,EAAL,CAIA,IAAM5B,EAAO0B,EAAOzB,wBACd7B,EAAe,CACnB0B,EAAMM,QAAUJ,EAAKK,KACrBP,EAAMQ,QAAUN,EAAKO,MAKCnC,EAAM,GAAK,GAAKA,EAAM,GAAKsD,EAAOpD,OAClCF,EAAM,GAAK,GAAKA,EAAM,GAAKsD,EAAOoB,SAGtD1E,EAAM,KAAO,IAAMA,EAAM,IAAMsD,EAAOpD,MAAQ,IAC9CF,EAAM,KAAO,IAAMA,EAAM,IAAMsD,EAAOoB,OAAS,IACjDb,EAAe7D,KAIbqF,EAAsB,WACtB7B,GACFO,KAOJ,OAHAuB,SAASC,iBAAiB,YAAaH,GACvCE,SAASC,iBAAiB,UAAWF,cAGnCC,SAASE,oBAAoB,YAAaJ,GAC1CE,SAASE,oBAAoB,UAAWH,MAEzC,CAAC7B,EAASF,EAAQO,EAAgBE,IAErC0B,sBACE7C,EACA,iBAAO,CACL8C,SAAU,SAACC,EAAwBC,GACjC,YADSD,IAAAA,EAAW,aACfrC,EAAL,CAGA,IAAMuC,EAAIP,SAASQ,cAAc,KACjCD,EAAEE,KAAOzC,EAAO0C,UAAUJ,GAC1BC,EAAEH,SAAWC,EACbE,EAAEI,UAEJ1B,MAAAA,EACA2B,kBAAmB,SAACN,gBAAkBtC,SAAAA,EAAQ0C,UAAUJ,IACxD3F,QAAAA,IAEF,CAACqD,EAAQrD,EAASsE,IAIlB4B,8BACErD,SAASsD,aAAQvD,SAAAA,EAAMuD,OAAQC,YAAa,QAAWvD,GACvDwD,aAAchC,EACdiC,YAAanC,EACboC,aAAcvB,EACdwB,YAAajD,EAAUU,OAAYwC,EACnCC,YAAanD,EAAUW,OAAYuC,EACnCE,UAAW7C,EACX8C,WAAY3B,EACZ4B,WAAY/C,EACZnB,IAAK+B,GACDxB,aCvQK4D,WAAW9G,EAAmC+G,OAC3D,IAAMC,EAAM,IAAIC,aAChBD,EAAIE,OAAS,WACXlH,EAAQqD,OAAOpD,MAAQ+G,EAAI/G,MAC3BD,EAAQqD,OAAOoB,OAASuC,EAAIvC,OAC5BzE,EAAQmH,UAAUH,EAAK,EAAG,GAC1BI,IAAIC,gBAAgBL,EAAIM,MAE1BN,EAAIM,IAAMF,IAAIG,gBAAgBR,mLCC9BS,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,KAERhE,EAAcC,cAClB,SAAC3D,EAAcC,GACbA,EAAQ0H,yBAA2B,SACnC1H,EAAQ2H,UAAYF,EACpBzH,EAAQ4H,SAAW5H,EAAQ6H,QAAU,QACrC7H,EAAQ8H,YAAcN,EACtBxH,EAAQ+H,WAA2B,GAAdN,EACrBzH,EAAQgI,YAAcpK,UAAU4J,GAC7B1J,SAAS,IACTC,wBACHkK,QAAQ9I,IAAIa,EAAQgI,aACpBhI,EAAQkI,OAAOnI,EAAM,GAAIA,EAAM,IAC/BC,EAAQE,aAEV,CAACsH,EAAOC,IAGJ3D,EAAYJ,cAAY,SAAC1D,GAC7BA,EAAQ0H,yBAA2B,eAClC,IAYH,MAAO,CAAES,KAAM,WAAY1E,YAAAA,EAAaG,eAVjBF,cACrB,SAAC3D,EAAcC,GACbA,EAAQgB,OAAOjB,EAAM,GAAIA,EAAM,IAC/BC,EAAQoI,UAEV,IAKsDtE,UAAAA,EAAWqC,OAFpD7H,EAAamJ,oCCwD5BD,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACdnK,eAAAA,aAAiB,MAES6F,WAAgB,IAAnCkF,OAAOC,OACRC,EAAeC,WACfC,EAAYD,WA0ClB,MAAO,CAAEL,KAAM,aAAc1E,YAxCTC,cAClB,SAAC3D,GACCwI,EAAaG,aAAUjC,EACvB6B,EArGN,SACEb,EACAkB,EACArL,GAKA,IAHA,IAAM+K,EAAe,GACfO,EAAepL,KAAKC,MAAMgK,EAAc,GACxCoB,EAAMpB,EAAcmB,EACjBtI,EAAI,EAAGA,EAAIsI,EAActI,IAAK,CACrC,IAAMrC,EACE,IAANqC,EAAU,EAAIuI,EAAMvI,EAAK9C,KAAKE,SAAWmL,EAAO,EAAIA,EAAM,EAC5DR,EAAMxI,KAAK,CACT5B,SAAAA,EACA6K,UAA2B,EAAhBtL,KAAKE,SAAe,EAC/BiL,OAAQvL,EAAWuL,EAAQrL,KAG/B,OAAO+K,EAoFMU,CAAUtB,EAAaD,EAAOlK,IACvCmL,EAAUC,QAAU3I,GAEtB,CAACuI,EAAUb,EAAaD,EAAOlK,IAkCSsG,eA/BnBF,cACrB,SAACG,EAAiB7D,GAChB,GAAKyI,EAAUC,QAAf,CAIA,IAAMM,GPrFVC,EOwFMV,EAAaG,QPhGMvK,EO8FnBsK,EAAUC,QP9FwBQ,EO+FlCrF,EPrFAsF,GATL3L,KAAK4L,MAAMF,EAAY,GAAK/K,EAAO,GAAI+K,EAAY,GAAK/K,EAAO,IAC9DX,KAAKmD,GAAK,IACD,EAAVnD,KAAKmD,SAQkB,IAAbsI,EACFE,EAEFF,GAGiCI,EAHFF,EAIhCG,EAAkB,EAAV9L,KAAKmD,IACb4I,GALsBN,GAMdI,EAAS,EAAIA,EAASA,EAASC,GAAS9L,KAAKmD,IAAM2I,EAC/D9L,KAAKmD,KACQnD,KAAKmD,GAAK4I,EAAOD,EAAQC,SO4EA,IAAzBhB,EAAaG,UACtBH,EAAaG,QAAUM,GAAsB,EAAVxL,KAAKmD,KA1E7B,SACjB6I,EACArL,EACA+K,EACAD,EACAD,EACAvB,EACAzH,GAEAwJ,EAASzI,QAAQ,SAAC0I,GAChBzJ,EAAQE,YAnCU,SACpB/B,EACA+K,EACAO,EACAC,EACA1J,GAEAA,EAAQE,YACRF,EAAQkI,OAAO/J,EAAO,GAAIA,EAAO,IACjC6B,EAAQ8H,YAAc2B,EAAQd,OAC9B3I,EAAQ2H,UAAY8B,EAAQX,UAC5B9I,EAAQ6H,QAAU,QAClB7H,EAAQ4H,SAAW,QACnB5H,EAAQgI,YAAcyB,EAAQd,OAC9B3I,EAAQ+H,WAAa0B,EAAQX,UAAY,EACzC9I,EAAQ2J,iBACND,EAAa,GACbA,EAAa,GACbR,EAAY,GACZA,EAAY,IAEdlJ,EAAQgB,OAAOkI,EAAY,GAAIA,EAAY,IAC3ClJ,EAAQoI,SA+BNwB,CAjBsB5L,EACpByL,EAAQxL,SAAWwJ,EAAc,EACjCwB,EACA9K,GAGyBH,EACzByL,EAAQxL,SAAWwJ,EAAc,EACjCuB,EACAE,GAWAO,EATmBzL,EACnByL,EAAQxL,SAAWwJ,EAAc,EACjCuB,EACA7K,GAQA6B,KA2CA6J,CACExB,EACAI,EAAUC,QACV7E,EACA0E,EAAaG,QACbM,EACAvB,EACAzH,GAEFuI,EAAaG,QAAUM,GAAsB,EAAVxL,KAAKmD,IACxC8H,EAAUC,QAAU7E,OArBlB4E,EAAUC,QAAU7E,EPzEH,IAAiBwF,EAClCC,EACAC,EAnBmBpL,EAAe+K,EAQxCD,EAEME,GOuGJ,CAACd,EAAOZ,IAKgDtB,OAF3C7H,EAAamJ,qCCxIFA,YAAAA,aAAc,KAwBxC,MAAO,CAAEU,KAAM,SAAU1E,YAvBLC,cAClB,SAAC3D,EAAcC,GACbA,EAAQ0H,yBAA2B,cAEnC1H,EAAQ2H,UAAYF,EACpBzH,EAAQ8H,YAAc,UACtB9H,EAAQ4H,SAAW5H,EAAQ6H,QAAU,QACrC7H,EAAQkI,OAAOnI,EAAM,GAAIA,EAAM,IAC/BC,EAAQE,aAEV,CAACuH,IAamC7D,eAVfF,cACrB,SAAC3D,EAAcC,GACbA,EAAQgB,OAAOjB,EAAM,GAAIA,EAAM,IAC/BC,EAAQoI,UAEV,IAKoDjC,OAFvC7H,EAAamJ,2BHJHqC,GACzB,IAAMC,EAAQvB,SAAoB,IAC5BwB,EAAMxB,SAAO,KACWrF,aAAvBnD,OAASoD,SACcD,YAAS,GAAhC8G,OAASC,SACc/G,YAAS,GAAhCgH,OAASC,OAEVpG,EAAYN,uBACTL,OACL,IAAMgH,EAAaL,EAAItB,QACvB,OAAK1I,GAIc,IAAfqK,IACFN,EAAMrB,QAAUqB,EAAMrB,QAAQ4B,MAAM,GAAID,GACxCL,EAAItB,QAAU,mBAEG,IAAI6B,QAAqB,SAACC,UAC3CnH,EAAOoH,OAAOD,oBADVzD,GAWN,OARIA,GACFgD,EAAMrB,QAAQ7I,KAAKkH,GAEjB+C,GAAQC,EAAMrB,QAAQnI,OAASuJ,IACjCC,EAAMrB,QAAUqB,EAAMrB,QAAQ4B,OAAOR,IAEvCI,EAAWH,EAAMrB,QAAQnI,OAAS,GAClC6J,GAAW,UAjBTnC,QAAQyC,MAAM,4CACP,IALgB,oCAwB3B,CAACV,EAAKD,EAAO/J,IAET2K,EAAOjH,6BACX,IAAM2G,EAAaL,EAAItB,QAEvB,OAAK1I,EAIDqK,EAAa,GAAKN,EAAMrB,QAAQnI,QAClC0H,QAAQ9I,IAAI,yBACL,oBAGH2H,EACJ9G,EACA+J,EAAMrB,QAAQqB,EAAMrB,QAAQnI,QAAU8J,EAAa,sBAKrD,OAHAL,EAAItB,UACJwB,EAAWF,EAAItB,QAAU,EAAIqB,EAAMrB,QAAQnI,QAC3C6J,GAAW,SAdTnC,QAAQyC,MAAM,4CACP,IALa,oCAoBrB,CAACV,EAAKD,EAAO/J,IAEV4K,EAAOlH,6BACX,IAAM2G,EAAaL,EAAItB,QAEvB,OAAK1I,EAIDqK,GAAc,mBACT,mBAGHvD,EAAW9G,EAAS+J,EAAMrB,QAAQqB,EAAMrB,QAAQnI,OAAS8J,qBAI/D,OAHAL,EAAItB,UACJwB,EAAWF,EAAItB,QAAU,EAAIqB,EAAMrB,QAAQnI,QAC3C6J,EAAWJ,EAAItB,QAAU,SAVvBT,QAAQyC,MAAM,4CACP,IALa,oCAgBrB,CAACX,EAAOC,EAAKhK,IAEVsE,EAAQZ,cAAY,WACxBqG,EAAMrB,QAAU,IACf,CAACqB,IAYJ,MAAO,CAAEjH,QAVO+H,UACd,iBAAO,CACLzH,WAAY,SAACpD,GACXoD,EAAWpD,IAEbgE,UAAAA,IAEF,CAACZ,EAAYY,IAGG2G,KAAAA,EAAMC,KAAAA,EAAMtG,MAAAA,EAAO2F,QAAAA,EAASE,QAAAA,oCIvG9C3C,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,KAERgB,EAAYD,WA8ClB,MAAO,CAAEL,KAAM,aAAc1E,YA5CTC,cAClB,SAAC3D,EAAcC,GACbA,EAAQ2H,UAAY,EACpB3H,EAAQ4H,SAAW5H,EAAQ6H,QAAU,QACrCY,EAAUC,QAAU3I,EACpBC,EAAQ8H,YAAcN,GAExB,CAACA,IAqCuC5D,eAlCnBF,cACrB,SAACG,EAAiB7D,GAChB,GAAKyI,EAAUC,SAIf,GACED,EAAUC,QAAQ,KAAO7E,EAAS,IAClC4E,EAAUC,QAAQ,KAAO7E,EAAS,GAFpC,CAMA7D,EAAQE,YAER,IAAK,IAAII,EAAI,EAAGA,EAAImH,EAAanH,GAAK,EAAG,CACvC,IAAMwK,EAAStN,KAAKC,MAAMgK,EAAc,EAAInH,GAC5CN,EAAQuB,YAAe,EAAIkG,GAAgBA,EAAcnH,GACzDN,EAAQkI,OACNO,EAAUC,QAAQ,GAAKoC,EACvBrC,EAAUC,QAAQ,GAAKoC,GAEzB9K,EAAQgB,OAAO6C,EAAS,GAAKiH,EAAQjH,EAAS,GAAKiH,GACnD9K,EAAQoI,SAEVpI,EAAQuB,YAAc,EACtBvB,EAAQE,YAERuI,EAAUC,QAAU7E,QAxBlB4E,EAAUC,QAAU7E,GA0BxB,CAAC4D,EAAagB,IAK0CtC,OAF3C7H,EAAamJ,2CC5C5BD,MAAAA,aAAQ,YACRuD,IAAAA,mBACAC,kBAAAA,aAAoB,SACpBC,qBAAAA,aAAuB,QACvBC,aAAAA,aAAe,KAEfH,IAAAA,EAAmBnN,UAAU4J,GAAO1J,SAAS,IAAKC,yBAClD,IAAMsC,EAASmI,SAAqB,IAC9B2C,EAAYH,EAAoBA,EAqDtC,MAAO,CAAE7C,KAAM,UAAW1E,YAnDNC,cAClB,SAAC3D,EAAcC,GACbA,EAAQ0H,yBAA2B,SACnC1H,EAAQ2H,UAAY,EACpB3H,EAAQ4H,SAAW5H,EAAQ6H,QAAU,QACrCxH,EAAOqI,QAAU,CAAC3I,IAEpB,IA4CqC6D,eAzChBF,cACrB,SAACG,EAAiB7D,GAChBA,EAAQ8H,YAAcN,EACtBxH,EAAQ2H,UAAY,EAEpBtH,EAAOqI,QAAQ7I,KAAKgE,GACpB7D,EAAQE,kBACeG,EAAOqI,QAAQrI,EAAOqI,QAAQnI,OAAS,GAC9DP,EAAQkI,kBACRlI,EAAQgB,aAARhB,EAAkB6D,GAClB7D,EAAQoI,SACRpI,EAAQ2H,UAAYsD,EAEpB,qrBAAoB5K,EAAOqI,wBAAS,KAAzB3I,UACHqL,EAAKrL,EAAM,GAAK8D,EAAS,GACzBwH,EAAKtL,EAAM,GAAK8D,EAAS,GACzB5F,EAAWmN,EAAKA,EAAKC,EAAKA,EAE5BpN,EAAWkN,GAAa3N,KAAKE,SAAWO,EAAWkN,IACrDnL,EAAQE,YACRF,EAAQ8H,YAAciD,EACtB/K,EAAQkI,OACNrE,EAAS,GAAKuH,EAAKF,EACnBrH,EAAS,GAAKwH,EAAKH,GAErBlL,EAAQgB,OACNjB,EAAM,GAAKqL,EAAKF,EAChBnL,EAAM,GAAKsL,EAAKH,GAElBlL,EAAQoI,YAId,CAAC6C,EAAsBzD,EAAO0D,EAAcC,EAAWJ,IAQFjH,UALrCJ,cAAY,SAAC1D,GAC7BA,EAAQ0H,yBAA2B,eAClC,IAG+DvB,OAFnD,kDC7DfqB,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,KAERpH,EAASmI,SAAqB,IAE9B/E,EAAcC,cAClB,SAAC3D,EAAcC,GACbA,EAAQuE,UAAYiD,EACpBxH,EAAQgI,YAAcR,EACtBxH,EAAQuB,YAAc,IACtBlB,EAAOqI,QAAU,CAAC3I,GAClBoB,EAAad,EAAOqI,QAAuB,IAAdjB,EAAmB,EAAGzH,IAErD,CAACwH,EAAOC,IAGJ3D,EAAYJ,cAAY,WAC5BrD,EAAOqI,QAAU,IAChB,IAYH,MAAO,CAAEP,KAAM,aAAc1E,YAAAA,EAAaG,eAVnBF,cACrB,SAAC3D,EAAcC,GACbK,EAAOqI,QAAQ7I,KAAKE,GACpBoB,EAAad,EAAOqI,QAASjB,EAAa,EAAGzH,IAE/C,CAACyH,IAKuD3D,UAAAA,EAAWqC,OAFtD7H,EAAamJ"}