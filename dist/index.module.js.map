{"version":3,"file":"index.module.js","sources":["../src/tools/brush/brushHelpers.ts","../src/utils/cursors.ts","../src/tools/brush/useBrush.ts","../src/tools/marker/useMarker.ts","../src/tools/airbrush/useAirbrush.ts","../src/tools/shading/useShadingBrush.ts","../src/tools/watercolor/watercolor.ts","../src/tools/watercolor/useWatercolor.ts","../src/tools/eraser/useEraser.ts","../src/tools/pencil/usePencil.ts","../src/tools/charcoal/useCharcoal.ts","../src/tools/calligraphy/useCalligraphy.ts","../src/tools/inkpen/useInkPen.ts","../src/tools/oilpaint/useOilPaint.ts","../src/tools/acrylic/useAcrylic.ts","../src/tools/crayon/useCrayon.ts","../src/tools/smudge/useSmudge.ts","../src/utils/pointUtils.ts","../src/components/Artboard.tsx","../src/history.ts"],"sourcesContent":["import tinycolor from \"tinycolor2\";\nimport { Point } from \"../../utils/pointUtils\";\n\nexport function varyColour(\n  sourceColour: string,\n  varyBrightness: number\n): string {\n  const amount = Math.round(Math.random() * varyBrightness);\n  const alpha = 1 - Math.random() / 4;\n  const colour = tinycolor(sourceColour);\n  const varied = colour.darken(amount - varyBrightness / 2).setAlpha(alpha);\n  return varied.toPercentageRgbString();\n}\n\nexport interface Bristle {\n  distance: number;\n  thickness: number;\n  colour: string;\n}\n\nexport const rotatePoint = (\n  distance: number,\n  angle: number,\n  origin: Point\n): Point => [\n  origin[0] + distance * Math.cos(angle),\n  origin[1] + distance * Math.sin(angle),\n];\n\nexport const getBearing = (origin: Point, destination: Point): number =>\n  (Math.atan2(destination[1] - origin[1], destination[0] - origin[0]) -\n    Math.PI / 2) %\n  (Math.PI * 2);\n\nexport const getNewAngle = (\n  origin: Point,\n  destination: Point,\n  oldAngle?: number\n): number => {\n  const bearing = getBearing(origin, destination);\n  if (typeof oldAngle === \"undefined\") {\n    return bearing;\n  }\n  return oldAngle - angleDiff(oldAngle, bearing);\n};\n\nexport const angleDiff = (angleA: number, angleB: number): number => {\n  const twoPi = Math.PI * 2;\n  const diff =\n    ((angleA - (angleB > 0 ? angleB : angleB + twoPi) + Math.PI) % twoPi) -\n    Math.PI;\n  return diff < -Math.PI ? diff + twoPi : diff;\n};\n","export function circleSVG(diameter: number) {\n  return `<svg xmlns='http://www.w3.org/2000/svg' width='${diameter}' height='${diameter}' viewBox='0 0 ${diameter} ${diameter}'><circle r='${\n    diameter / 2\n  }' cy='${diameter / 2}' cx='${\n    diameter / 2\n  }' stroke-width='1' stroke='rgba(0,0,0,0.5)' fill='none'/></svg>`;\n}\n\nexport function circleDataUri(diameter: number) {\n  return `data:image/svg+xml;base64,${btoa(circleSVG(diameter))}`;\n}\n\nexport function circleCursor(diameter: number) {\n  return `url(${circleDataUri(diameter)}) ${diameter / 2} ${\n    diameter / 2\n  }, crosshair`;\n}\n","import { useCallback, useRef, useState } from \"react\";\n\nimport { Bristle, getNewAngle, rotatePoint, varyColour } from \"./brushHelpers\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport type Brush = Array<Bristle>;\n\nfunction makeBrush(\n  strokeWidth: number,\n  colour: string,\n  varyBrightness: number\n): Brush {\n  const brush: Brush = [];\n  const bristleCount = Math.round(strokeWidth / 3);\n  const gap = strokeWidth / bristleCount;\n  for (let i = 0; i < bristleCount; i++) {\n    const distance =\n      i === 0 ? 0 : gap * i + (Math.random() * gap) / 2 - gap / 2;\n    brush.push({\n      distance,\n      thickness: Math.random() * 2 + 2,\n      colour: varyColour(colour, varyBrightness),\n    });\n  }\n  return brush;\n}\n\nconst strokeBristle = (\n  origin: Point,\n  destination: Point,\n  bristle: Bristle,\n  controlPoint: Point,\n  context: CanvasRenderingContext2D\n) => {\n  context.beginPath();\n  context.moveTo(origin[0], origin[1]);\n  context.strokeStyle = bristle.colour;\n  context.lineWidth = bristle.thickness;\n  context.lineCap = \"round\";\n  context.lineJoin = \"round\";\n  context.shadowColor = bristle.colour;\n  context.shadowBlur = bristle.thickness / 2;\n  context.quadraticCurveTo(\n    controlPoint[0],\n    controlPoint[1],\n    destination[0],\n    destination[1]\n  );\n  context.lineTo(destination[0], destination[1]);\n  context.stroke();\n};\n\nconst drawStroke = (\n  bristles: Brush,\n  origin: Point,\n  destination: Point,\n  oldAngle: number,\n  newAngle: number,\n  strokeWidth: number,\n  context: CanvasRenderingContext2D\n) => {\n  bristles.forEach((bristle) => {\n    context.beginPath();\n    const bristleOrigin = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      oldAngle,\n      origin\n    );\n\n    const bristleDestination = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      newAngle,\n      destination\n    );\n    const controlPoint = rotatePoint(\n      bristle.distance - strokeWidth / 2,\n      newAngle,\n      origin\n    );\n\n    strokeBristle(\n      bristleOrigin,\n      bristleDestination,\n      bristle,\n      controlPoint,\n      context\n    );\n  });\n};\n\nexport interface UseBrushProps {\n  color?: string;\n  strokeWidth?: number;\n  varyBrightness?: number;\n}\n\nexport function useBrush({\n  color = \"#000000\",\n  strokeWidth = 25,\n  varyBrightness = 5,\n}: UseBrushProps): ToolHandlers {\n  const [brush, setBrush] = useState<Brush>([]);\n  const currentAngle = useRef<number>();\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point) => {\n      currentAngle.current = undefined;\n      setBrush(makeBrush(strokeWidth, color, varyBrightness));\n      lastPoint.current = point;\n    },\n    [setBrush, strokeWidth, color, varyBrightness]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = newPoint;\n        return;\n      }\n      const newAngle = getNewAngle(\n        lastPoint.current,\n        newPoint,\n        currentAngle.current\n      );\n      if (typeof currentAngle.current === \"undefined\") {\n        currentAngle.current = newAngle % (Math.PI * 2);\n      }\n      drawStroke(\n        brush,\n        lastPoint.current,\n        newPoint,\n        currentAngle.current,\n        newAngle,\n        strokeWidth,\n        context\n      );\n      currentAngle.current = newAngle % (Math.PI * 2);\n      lastPoint.current = newPoint;\n    },\n    [brush, strokeWidth]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Paintbrush\", startStroke, continueStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\n\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseMarkerProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useMarker({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseMarkerProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineWidth = 3;\n      context.lineJoin = context.lineCap = \"round\";\n      lastPoint.current = point;\n      context.strokeStyle = color;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = newPoint;\n        return;\n      }\n      if (\n        lastPoint.current[0] === newPoint[0] &&\n        lastPoint.current[1] === newPoint[1]\n      ) {\n        return;\n      }\n      context.beginPath();\n\n      for (let i = 0; i < strokeWidth; i += 2) {\n        const offset = Math.round(strokeWidth / 2 - i);\n        context.globalAlpha = (1 / strokeWidth) * (strokeWidth - i);\n        context.moveTo(\n          lastPoint.current[0] - offset,\n          lastPoint.current[1] - offset\n        );\n        context.lineTo(newPoint[0] - offset, newPoint[1] - offset);\n        context.stroke();\n      }\n      context.globalAlpha = 1;\n      context.beginPath();\n\n      lastPoint.current = newPoint;\n    },\n    [strokeWidth, lastPoint]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Marker\", startStroke, continueStroke, cursor };\n}\n","import { useCallback } from \"react\";\nimport tinycolor from \"tinycolor2\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseAirbrushProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useAirbrush({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseAirbrushProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"darken\";\n      context.lineWidth = strokeWidth;\n      context.lineJoin = context.lineCap = \"round\";\n      context.strokeStyle = color;\n      context.shadowBlur = strokeWidth * 0.5;\n      context.shadowColor = tinycolor(color)\n        .setAlpha(0.5)\n        .toPercentageRgbString();\n      console.log(context.shadowColor);\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [color, strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    []\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Airbrush\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { useCallback, useRef } from \"react\";\nimport tinycolor from \"tinycolor2\";\n\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nexport interface UseShadingProps {\n  color?: string;\n  neighbourColor?: string;\n  neighbourStrokeWidth?: number;\n  distanceThreshold?: number;\n  spreadFactor?: number;\n}\n\nexport function useShadingBrush({\n  color = \"#000000\",\n  neighbourColor,\n  distanceThreshold = 40,\n  neighbourStrokeWidth = 1,\n  spreadFactor = 0.9,\n}: UseShadingProps): ToolHandlers {\n  neighbourColor ||= tinycolor(color).setAlpha(0.2).toPercentageRgbString();\n  const points = useRef<Array<Point>>([]);\n  const threshold = distanceThreshold * distanceThreshold;\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"darken\";\n      context.lineWidth = 1;\n      context.lineJoin = context.lineCap = \"round\";\n      points.current = [point];\n    },\n    []\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point, context: CanvasRenderingContext2D) => {\n      context.strokeStyle = color;\n      context.lineWidth = 1;\n\n      points.current.push(newPoint);\n      context.beginPath();\n      const [prevX, prevY] = points.current[points.current.length - 2];\n      context.moveTo(prevX, prevY);\n      context.lineTo(...newPoint);\n      context.stroke();\n      context.lineWidth = neighbourStrokeWidth;\n\n      for (const point of points.current) {\n        const dx = point[0] - newPoint[0];\n        const dy = point[1] - newPoint[1];\n        const distance = dx * dx + dy * dy;\n\n        if (distance < threshold && Math.random() > distance / threshold) {\n          context.beginPath();\n          context.strokeStyle = neighbourColor as string;\n          context.moveTo(\n            newPoint[0] + dx * spreadFactor,\n            newPoint[1] + dy * spreadFactor\n          );\n          context.lineTo(\n            point[0] - dx * spreadFactor,\n            point[1] - dy * spreadFactor\n          );\n          context.stroke();\n        }\n      }\n    },\n    [neighbourStrokeWidth, color, spreadFactor, threshold, neighbourColor]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n  const cursor = \"crosshair\";\n\n  return { name: \"Shading\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { Point } from \"../../utils/pointUtils\";\n\nlet spareRandom: number | null = null;\n\n// https://gist.github.com/bluesmoon/7925696\nfunction normalRandom() {\n  let val, u, v, s, mul;\n  if (spareRandom !== null) {\n    val = spareRandom;\n    spareRandom = null;\n  } else {\n    do {\n      u = Math.random() * 2 - 1;\n      v = Math.random() * 2 - 1;\n      s = u * u + v * v;\n    } while (s === 0 || s >= 1);\n    mul = Math.sqrt((-2 * Math.log(s)) / s);\n    val = u * mul;\n    spareRandom = v * mul;\n  }\n  return val;\n}\nexport function makePolygon(\n  centre: Point,\n  sides: number,\n  radius: number\n): Array<Point> {\n  const increment = (Math.PI * 2) / sides;\n  const result: Array<Point> = [];\n  for (let i = 1; i <= sides; i++) {\n    result.push([\n      radius * Math.cos(increment * i) + centre[0],\n      radius * Math.sin(increment * i) + centre[1],\n    ]);\n  }\n  return result;\n}\n\nexport function deformPolygon(\n  points: Array<Point>,\n  depth: number,\n  variance: number,\n  vdiv: number\n): Array<Point> {\n  const newPoints: Array<Point> = [];\n  for (let i = 0; i < points.length; i++) {\n    const currentPoint = points[i];\n    const nextPoint = points[(i + 1) % points.length];\n    newPoints.push(currentPoint);\n    newPoints.push(\n      ...subdivideVertex(currentPoint, nextPoint, depth, variance, vdiv)\n    );\n  }\n  return newPoints;\n}\n\nfunction subdivideVertex(\n  currentPoint: Point,\n  nextPoint: Point,\n  depth: number,\n  variance: number,\n  vdiv: number\n): Array<Point> {\n  if (depth < 0) {\n    return [];\n  }\n  //   Find the midpoint\n  const midX = (currentPoint[0] + nextPoint[0]) / 2;\n  const midY = (currentPoint[1] + nextPoint[1]) / 2;\n\n  //   Nudge the midpoint\n  const newMidpoint: Point = [\n    midX + normalRandom() * variance,\n    midY + normalRandom() * variance,\n  ];\n\n  const newPoints = subdivideVertex(\n    currentPoint,\n    newMidpoint,\n    depth - 1,\n    variance / vdiv,\n    vdiv\n  );\n\n  newPoints.push(newMidpoint);\n  newPoints.push(\n    ...subdivideVertex(newMidpoint, nextPoint, depth - 1, variance / vdiv, vdiv)\n  );\n  return newPoints;\n}\n\nexport function getSplodge(\n  point: Point,\n  sides: number,\n  radius: number\n): Array<Point> {\n  return deformPolygon(makePolygon(point, sides, radius), 5, radius / 10, 2);\n}\n\nexport function splodgeAtPoint(\n  point: Point,\n  context: CanvasRenderingContext2D,\n  width: number\n): void {\n  context.beginPath();\n  getSplodge(point, Math.round(width / 5), width).forEach((point) => {\n    context.lineTo(...point);\n  });\n  context.closePath();\n  context.fill();\n}\n\nexport function splodgeTrail(\n  points: Array<Point>,\n  width: number,\n  trail: number,\n  context: CanvasRenderingContext2D\n): void {\n  const count = Math.min(trail, points.length / 3);\n  for (let i = 0; i < count; i++) {\n    context.globalAlpha = 0.01 - (0.009 / count) * i;\n    splodgeAtPoint(\n      points[points.length - i * 3 - 1],\n      context,\n      width + (width / count) * i\n    );\n  }\n  context.globalAlpha = 0.1;\n}\n","import { useCallback, useRef } from \"react\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nimport { splodgeTrail } from \"./watercolor\";\n\nexport interface UseWatercolorProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useWatercolor({\n  color = \"#000000\",\n  strokeWidth = 25,\n}: UseWatercolorProps): ToolHandlers {\n  const points = useRef<Array<Point>>([]);\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.fillStyle = color;\n      context.shadowColor = color;\n      context.globalAlpha = 0.01;\n      points.current = [point];\n      splodgeTrail(points.current, strokeWidth * 1.1, 1, context);\n    },\n    [color, strokeWidth]\n  );\n\n  const endStroke = useCallback(() => {\n    points.current = [];\n  }, []);\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      points.current.push(point);\n      splodgeTrail(points.current, strokeWidth, 5, context);\n    },\n    [strokeWidth]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Watercolor\", startStroke, continueStroke, endStroke, cursor };\n}\n","import { useCallback } from \"react\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { circleCursor } from \"../../utils/cursors\";\nexport interface UseEraserProps {\n  color?: string;\n  strokeWidth?: number;\n}\n\nexport function useEraser({ strokeWidth = 25 }: UseEraserProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalCompositeOperation = \"source-over\";\n\n      context.lineWidth = strokeWidth;\n      context.strokeStyle = \"#ffffff\";\n      context.lineJoin = context.lineCap = \"round\";\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [strokeWidth]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    []\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Eraser\", startStroke, continueStroke, cursor };\n}\n","import { useCallback } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UsePencilProps {\n  color?: string;\n  strokeWidth?: number;\n  opacity?: number;\n}\n\nexport function usePencil({\n  color = \"#2c2c2c\",\n  strokeWidth = 3,\n  opacity = 0.8,\n}: UsePencilProps): ToolHandlers {\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = opacity;\n      context.lineWidth = strokeWidth;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"multiply\";\n      context.moveTo(point[0], point[1]);\n      context.beginPath();\n    },\n    [color, strokeWidth, opacity]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      // Add some texture by varying the line width slightly\n      const variation = (Math.random() - 0.5) * 0.5;\n      context.lineWidth = strokeWidth + variation;\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n    },\n    [strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Pencil\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseCharcoalProps {\n  color?: string;\n  strokeWidth?: number;\n  roughness?: number;\n}\n\nexport function useCharcoal({\n  color = \"#1a1a1a\",\n  strokeWidth = 15,\n  roughness = 0.7,\n}: UseCharcoalProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = 0.6;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"multiply\";\n      lastPoint.current = point;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create multiple strokes for texture\n      const bristleCount = Math.floor(strokeWidth / 3);\n      for (let i = 0; i < bristleCount; i++) {\n        context.beginPath();\n        \n        // Random offset for each bristle\n        const offsetX = (Math.random() - 0.5) * strokeWidth * roughness;\n        const offsetY = (Math.random() - 0.5) * strokeWidth * roughness;\n        \n        // Vary line width for each bristle\n        context.lineWidth = Math.random() * 3 + 1;\n        \n        context.moveTo(\n          lastPoint.current[0] + offsetX,\n          lastPoint.current[1] + offsetY\n        );\n        context.lineTo(point[0] + offsetX, point[1] + offsetY);\n        context.stroke();\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, roughness]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Charcoal\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseCalligraphyProps {\n  color?: string;\n  strokeWidth?: number;\n  angle?: number;\n}\n\nexport function useCalligraphy({\n  color = \"#000000\",\n  strokeWidth = 20,\n  angle = 45,\n}: UseCalligraphyProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n  const lastTime = useRef<number>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      lastPoint.current = point;\n      lastTime.current = Date.now();\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current || !lastTime.current) {\n        lastPoint.current = point;\n        lastTime.current = Date.now();\n        return;\n      }\n\n      const currentTime = Date.now();\n      const timeDelta = Math.max(currentTime - lastTime.current, 1);\n      \n      // Calculate speed and direction\n      const dx = point[0] - lastPoint.current[0];\n      const dy = point[1] - lastPoint.current[1];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = distance / timeDelta;\n      \n      // Calculate stroke angle relative to pen angle\n      const strokeAngle = Math.atan2(dy, dx);\n      const angleDiff = Math.abs(strokeAngle - (angle * Math.PI / 180));\n      const normalizedAngle = Math.min(angleDiff, Math.PI - angleDiff);\n      \n      // Vary width based on angle and speed\n      const angleMultiplier = Math.sin(normalizedAngle) * 0.8 + 0.2;\n      const speedMultiplier = Math.max(0.3, 1 - speed * 0.02);\n      const currentWidth = strokeWidth * angleMultiplier * speedMultiplier;\n\n      context.beginPath();\n      context.lineWidth = currentWidth;\n      context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n      context.lineTo(point[0], point[1]);\n      context.stroke();\n\n      lastPoint.current = point;\n      lastTime.current = currentTime;\n    },\n    [strokeWidth, angle]\n  );\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Calligraphy\", startStroke, continueStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseInkPenProps {\n  color?: string;\n  strokeWidth?: number;\n  flow?: number;\n}\n\nexport function useInkPen({\n  color = \"#000080\",\n  strokeWidth = 4,\n  flow = 0.9,\n}: UseInkPenProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n  const pressure = useRef<number>(1);\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = flow;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.shadowColor = color;\n      context.shadowBlur = 1;\n      lastPoint.current = point;\n      pressure.current = 0.5;\n    },\n    [color, flow]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Simulate pressure based on speed\n      const dx = point[0] - lastPoint.current[0];\n      const dy = point[1] - lastPoint.current[1];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      // Smooth pressure changes\n      const targetPressure = Math.max(0.3, Math.min(1, 1 - distance * 0.01));\n      pressure.current = pressure.current * 0.7 + targetPressure * 0.3;\n\n      const currentWidth = strokeWidth * pressure.current;\n\n      context.beginPath();\n      context.lineWidth = currentWidth;\n      \n      // Use quadratic curves for smoother lines\n      const midX = (lastPoint.current[0] + point[0]) / 2;\n      const midY = (lastPoint.current[1] + point[1]) / 2;\n      \n      context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n      context.quadraticCurveTo(lastPoint.current[0], lastPoint.current[1], midX, midY);\n      context.stroke();\n\n      lastPoint.current = point;\n    },\n    [strokeWidth]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.shadowBlur = 0;\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Ink Pen\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\nimport tinycolor from \"tinycolor2\";\n\nexport interface UseOilPaintProps {\n  color?: string;\n  strokeWidth?: number;\n  blending?: number;\n}\n\nexport function useOilPaint({\n  color = \"#8B4513\",\n  strokeWidth = 25,\n  blending = 0.6,\n}: UseOilPaintProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = 0.8;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"source-over\";\n      lastPoint.current = point;\n    },\n    [color]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create multiple brush strokes with slight variations\n      const brushStrokes = 5;\n      for (let i = 0; i < brushStrokes; i++) {\n        context.beginPath();\n        \n        // Vary the color slightly for each stroke\n        const baseColor = tinycolor(color);\n        const variation = (Math.random() - 0.5) * 20;\n        const variedColor = baseColor.lighten(variation).toString();\n        \n        context.strokeStyle = variedColor;\n        context.lineWidth = strokeWidth + (Math.random() - 0.5) * 4;\n        \n        // Add random offset for texture\n        const offsetX = (Math.random() - 0.5) * strokeWidth * 0.3;\n        const offsetY = (Math.random() - 0.5) * strokeWidth * 0.3;\n        \n        context.moveTo(\n          lastPoint.current[0] + offsetX,\n          lastPoint.current[1] + offsetY\n        );\n        context.lineTo(point[0] + offsetX, point[1] + offsetY);\n        \n        // Use different blend modes for some strokes\n        if (i > 2) {\n          context.globalCompositeOperation = \"multiply\";\n          context.globalAlpha = blending * 0.5;\n        } else {\n          context.globalCompositeOperation = \"source-over\";\n          context.globalAlpha = 0.8;\n        }\n        \n        context.stroke();\n      }\n\n      lastPoint.current = point;\n    },\n    [color, strokeWidth, blending]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Oil Paint\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseAcrylicProps {\n  color?: string;\n  strokeWidth?: number;\n  opacity?: number;\n}\n\nexport function useAcrylic({\n  color = \"#FF6B35\",\n  strokeWidth = 20,\n  opacity = 0.9,\n}: UseAcrylicProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = opacity;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"source-over\";\n      lastPoint.current = point;\n    },\n    [color, opacity]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create a solid, vibrant stroke with slight texture\n      context.beginPath();\n      context.lineWidth = strokeWidth;\n      \n      // Add slight texture variation\n      const textureVariation = (Math.random() - 0.5) * 2;\n      context.lineWidth = Math.max(1, strokeWidth + textureVariation);\n      \n      // Use bezier curves for smoother application\n      const controlPoint1X = lastPoint.current[0] + (point[0] - lastPoint.current[0]) * 0.3;\n      const controlPoint1Y = lastPoint.current[1] + (point[1] - lastPoint.current[1]) * 0.3;\n      const controlPoint2X = lastPoint.current[0] + (point[0] - lastPoint.current[0]) * 0.7;\n      const controlPoint2Y = lastPoint.current[1] + (point[1] - lastPoint.current[1]) * 0.7;\n      \n      context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n      context.bezierCurveTo(\n        controlPoint1X, controlPoint1Y,\n        controlPoint2X, controlPoint2Y,\n        point[0], point[1]\n      );\n      context.stroke();\n\n      // Add some paint buildup effect\n      if (Math.random() > 0.8) {\n        context.beginPath();\n        context.globalAlpha = opacity * 0.3;\n        context.lineWidth = strokeWidth * 0.6;\n        context.moveTo(lastPoint.current[0], lastPoint.current[1]);\n        context.lineTo(point[0], point[1]);\n        context.stroke();\n        context.globalAlpha = opacity;\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, opacity]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Acrylic\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseCrayonProps {\n  color?: string;\n  strokeWidth?: number;\n  pressure?: number;\n}\n\nexport function useCrayon({\n  color = \"#DC143C\",\n  strokeWidth = 12,\n  pressure = 0.6,\n}: UseCrayonProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      context.globalAlpha = pressure;\n      context.strokeStyle = color;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.globalCompositeOperation = \"multiply\";\n      lastPoint.current = point;\n    },\n    [color, pressure]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      // Create waxy texture with multiple overlapping strokes\n      const textureStrokes = 8;\n      for (let i = 0; i < textureStrokes; i++) {\n        context.beginPath();\n        \n        // Random positioning for texture\n        const offsetRadius = strokeWidth * 0.4;\n        const angle = (i / textureStrokes) * Math.PI * 2;\n        const offsetX = Math.cos(angle) * offsetRadius * Math.random();\n        const offsetY = Math.sin(angle) * offsetRadius * Math.random();\n        \n        // Vary the stroke width for texture\n        context.lineWidth = Math.max(1, strokeWidth * (0.3 + Math.random() * 0.7));\n        \n        // Vary opacity for buildup effect\n        context.globalAlpha = pressure * (0.2 + Math.random() * 0.6);\n        \n        context.moveTo(\n          lastPoint.current[0] + offsetX,\n          lastPoint.current[1] + offsetY\n        );\n        context.lineTo(point[0] + offsetX, point[1] + offsetY);\n        context.stroke();\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, pressure]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Crayon\", startStroke, continueStroke, endStroke, cursor };\n} ","import { useCallback, useRef } from \"react\";\nimport { Point } from \"../../utils/pointUtils\";\nimport { ToolHandlers } from \"../../components/Artboard\";\nimport { circleCursor } from \"../../utils/cursors\";\n\nexport interface UseSmudgeProps {\n  strokeWidth?: number;\n  strength?: number;\n}\n\nexport function useSmudge({\n  strokeWidth = 30,\n  strength = 0.8,\n}: UseSmudgeProps): ToolHandlers {\n  const lastPoint = useRef<Point>();\n  const canvas = useRef<HTMLCanvasElement>();\n  const sourceImageData = useRef<ImageData>();\n\n  const startStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      lastPoint.current = point;\n      canvas.current = context.canvas;\n      \n      // Capture the area around the starting point\n      const radius = strokeWidth;\n      const x = Math.max(0, point[0] - radius);\n      const y = Math.max(0, point[1] - radius);\n      const width = Math.min(canvas.current.width - x, radius * 2);\n      const height = Math.min(canvas.current.height - y, radius * 2);\n      \n      if (width > 0 && height > 0) {\n        sourceImageData.current = context.getImageData(x, y, width, height);\n      }\n    },\n    [strokeWidth]\n  );\n\n  const continueStroke = useCallback(\n    (point: Point, context: CanvasRenderingContext2D) => {\n      if (!lastPoint.current || !sourceImageData.current || !canvas.current) {\n        lastPoint.current = point;\n        return;\n      }\n\n      const dx = point[0] - lastPoint.current[0];\n      const dy = point[1] - lastPoint.current[1];\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < 2) return; // Avoid too many small movements\n\n      // Create a temporary canvas for the smudge effect\n      const tempCanvas = document.createElement('canvas');\n      const tempContext = tempCanvas.getContext('2d');\n      if (!tempContext) return;\n\n      tempCanvas.width = strokeWidth * 2;\n      tempCanvas.height = strokeWidth * 2;\n\n      // Draw the source image data\n      tempContext.putImageData(sourceImageData.current, 0, 0);\n\n      // Apply the smudge by stretching the image\n      const stretchFactor = Math.min(distance * 0.1, strokeWidth * 0.5);\n      \n      context.globalAlpha = strength;\n      context.globalCompositeOperation = \"source-over\";\n      \n      // Draw multiple stretched versions for smooth blending\n      for (let i = 0; i < 5; i++) {\n        const factor = (i + 1) / 5;\n        const offsetX = dx * factor * 0.3;\n        const offsetY = dy * factor * 0.3;\n        \n        context.drawImage(\n          tempCanvas,\n          point[0] - strokeWidth + offsetX,\n          point[1] - strokeWidth + offsetY,\n          strokeWidth * 2,\n          strokeWidth * 2\n        );\n      }\n\n      // Update source image data for next stroke\n      const radius = strokeWidth;\n      const x = Math.max(0, point[0] - radius);\n      const y = Math.max(0, point[1] - radius);\n      const width = Math.min(canvas.current.width - x, radius * 2);\n      const height = Math.min(canvas.current.height - y, radius * 2);\n      \n      if (width > 0 && height > 0) {\n        sourceImageData.current = context.getImageData(x, y, width, height);\n      }\n\n      lastPoint.current = point;\n    },\n    [strokeWidth, strength]\n  );\n\n  const endStroke = useCallback((context: CanvasRenderingContext2D) => {\n    context.globalAlpha = 1;\n    context.globalCompositeOperation = \"source-over\";\n  }, []);\n\n  const cursor = circleCursor(strokeWidth);\n\n  return { name: \"Smudge\", startStroke, continueStroke, endStroke, cursor };\n} ","export type Point = [number, number];\n\nexport const getTouchPoint = (event: React.TouchEvent): Point => {\n  if (!event.currentTarget) {\n    return [0, 0];\n  }\n  const rect = event.currentTarget.getBoundingClientRect();\n  const touch = event.targetTouches[0];\n  return [touch.clientX - rect.left, touch.clientY - rect.top];\n};\n\nexport const getMousePoint = (event: React.MouseEvent): Point => [\n  event.nativeEvent.offsetX,\n  event.nativeEvent.offsetY,\n];\n\nconst BUTTON = 0b01;\nexport const mouseButtonIsDown = (buttons: number): boolean =>\n  (BUTTON & buttons) === BUTTON;\n","import React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useState,\n  useEffect,\n} from \"react\";\n\nimport { History } from \"../history\";\n\nimport {\n  getMousePoint,\n  getTouchPoint,\n  mouseButtonIsDown,\n  Point,\n} from \"../utils/pointUtils\";\n\nexport interface ArtboardProps\n  extends React.CanvasHTMLAttributes<HTMLCanvasElement> {\n  tool: ToolHandlers;\n  history?: History;\n  onStartStroke?: (point: Point) => void;\n  onContinueStroke?: (point: Point) => void;\n  onEndStroke?: () => void;\n}\n\nexport interface ArtboardRef {\n  download: (filename?: string, type?: string) => void;\n  getImageAsDataUri: (type?: string) => string | undefined;\n  clear: () => void;\n  context?: CanvasRenderingContext2D | null;\n}\n\nexport interface ToolHandlers {\n  name: string;\n  startStroke?: (point: Point, context: CanvasRenderingContext2D) => void;\n  continueStroke?: (point: Point, context: CanvasRenderingContext2D) => void;\n  endStroke?: (context: CanvasRenderingContext2D) => void;\n  cursor?: string;\n}\n\nexport const Artboard = forwardRef(function Artboard(\n  {\n    tool,\n    style,\n    history,\n    onStartStroke,\n    onContinueStroke,\n    onEndStroke,\n    ...props\n  }: ArtboardProps,\n  ref: ForwardedRef<ArtboardRef>\n) {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>();\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>();\n  const [drawing, setDrawing] = useState(false);\n\n  const startStroke = useCallback(\n    (point: Point) => {\n      if (!context) {\n        return;\n      }\n      context.save();\n      setDrawing(true);\n      tool.startStroke?.(point, context);\n      onStartStroke?.(point);\n    },\n    [tool, context, onStartStroke]\n  );\n\n  const continueStroke = useCallback(\n    (newPoint: Point) => {\n      if (!context) {\n        return;\n      }\n      tool.continueStroke?.(newPoint, context);\n      onContinueStroke?.(newPoint);\n    },\n    [tool, context, onContinueStroke]\n  );\n\n  const endStroke = useCallback(() => {\n    setDrawing(false);\n    if (context) {\n      tool.endStroke?.(context);\n      onEndStroke?.();\n      context.restore();\n      if (canvas && history) {\n        history.pushState(canvas);\n      }\n    }\n  }, [tool, context, canvas, history, onEndStroke]);\n\n  const mouseMove = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getMousePoint(event));\n    },\n    [continueStroke, drawing]\n  );\n\n  const touchMove = useCallback(\n    (event: React.TouchEvent) => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getTouchPoint(event));\n    },\n    [continueStroke, drawing]\n  );\n\n  const mouseDown = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (drawing) {\n        return;\n      }\n      event.preventDefault();\n      startStroke(getMousePoint(event));\n    },\n    [drawing, startStroke]\n  );\n\n  const touchStart = useCallback(\n    (event: React.TouchEvent) => {\n      if (drawing) {\n        return;\n      }\n      startStroke(getTouchPoint(event));\n    },\n    [drawing, startStroke]\n  );\n\n  const clear = useCallback(() => {\n    if (!context || !canvas) {\n      return;\n    }\n    context.save();\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    context.restore();\n    if (canvas && history) {\n      history.pushState(canvas);\n    }\n  }, [context, canvas, history]);\n\n  const gotRef = useCallback(\n    (canvasRef: HTMLCanvasElement) => {\n      if (!canvasRef) {\n        return;\n      }\n      canvasRef.width = canvasRef.offsetWidth;\n      canvasRef.height = canvasRef.offsetHeight;\n      const ctx = canvasRef.getContext(\"2d\");\n      setCanvas(canvasRef);\n      setContext(ctx);\n      if (!ctx) {\n        return;\n      }\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, canvasRef.width, canvasRef.height);\n      ctx.fillStyle = \"transparent\";\n      if (history) {\n        history.setContext(ctx);\n        history.pushState(canvasRef);\n      }\n    },\n    [history]\n  );\n\n  const mouseEnter = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      // If mouse button is down but we're not drawing, start a new stroke\n      if (mouseButtonIsDown(event.buttons) && !drawing) {\n        mouseDown(event);\n      }\n    },\n    [drawing, mouseDown]\n  );\n\n  const mouseLeave = useCallback(\n    (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      // Don't end the stroke when leaving the canvas - let the global mouse handlers manage this\n      // This allows continuous drawing when moving outside and back into the canvas\n    },\n    []\n  );\n\n  // Add global mouse event listeners for better drawing experience\n  useEffect(() => {\n    if (!drawing || !canvas) {\n      return;\n    }\n\n    const handleGlobalMouseMove = (event: MouseEvent) => {\n      if (!drawing) {\n        return;\n      }\n      \n      const rect = canvas.getBoundingClientRect();\n      const point: Point = [\n        event.clientX - rect.left,\n        event.clientY - rect.top\n      ];\n      \n      // Only process global mouse events when outside the canvas bounds\n      // This prevents double processing when drawing inside the canvas\n      const isOutsideCanvas = point[0] < 0 || point[0] > canvas.width || \n                              point[1] < 0 || point[1] > canvas.height;\n      \n      if (isOutsideCanvas && \n          point[0] >= -50 && point[0] <= canvas.width + 50 && \n          point[1] >= -50 && point[1] <= canvas.height + 50) {\n        continueStroke(point);\n      }\n    };\n\n    const handleGlobalMouseUp = () => {\n      if (drawing) {\n        endStroke();\n      }\n    };\n\n    document.addEventListener('mousemove', handleGlobalMouseMove);\n    document.addEventListener('mouseup', handleGlobalMouseUp);\n\n    return () => {\n      document.removeEventListener('mousemove', handleGlobalMouseMove);\n      document.removeEventListener('mouseup', handleGlobalMouseUp);\n    };\n  }, [drawing, canvas, continueStroke, endStroke]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      download: (filename = \"image.png\", type?: string) => {\n        if (!canvas) {\n          return;\n        }\n        const a = document.createElement(\"a\");\n        a.href = canvas.toDataURL(type);\n        a.download = filename;\n        a.click();\n      },\n      clear,\n      getImageAsDataUri: (type?: string) => canvas?.toDataURL(type),\n      context,\n    }),\n    [canvas, context, clear]\n  );\n\n  return (\n    <canvas\n      style={{ cursor: tool?.cursor, touchAction: \"none\", ...style }}\n      onTouchStart={touchStart}\n      onMouseDown={mouseDown}\n      onMouseEnter={mouseEnter}\n      onMouseMove={drawing ? mouseMove : undefined}\n      onTouchMove={drawing ? touchMove : undefined}\n      onMouseUp={endStroke}\n      onMouseOut={mouseLeave}\n      onTouchEnd={endStroke}\n      ref={gotRef}\n      {...props}\n    />\n  );\n});\n","import { useCallback, useMemo, useRef, useState } from \"react\";\n\nasync function applyImage(context: CanvasRenderingContext2D, blob: Blob) {\n  const img = new Image();\n  img.onload = () => {\n    context.canvas.width = img.width;\n    context.canvas.height = img.height;\n    context.drawImage(img, 0, 0);\n    URL.revokeObjectURL(img.src);\n  };\n  img.src = URL.createObjectURL(blob);\n}\n\nexport interface History {\n  setContext: (context: CanvasRenderingContext2D) => void;\n  pushState: (canvas: HTMLCanvasElement) => Promise<boolean>;\n}\nexport interface HistoryHook {\n  history: History;\n\n  undo: () => Promise<boolean>;\n  redo: () => Promise<boolean>;\n  clear: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n}\n\nexport function useHistory(size?: number): HistoryHook {\n  const stack = useRef<Array<Blob>>([]);\n  const crs = useRef(0);\n  const [context, setContext] = useState<CanvasRenderingContext2D>();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  const pushState = useCallback(\n    async (canvas: HTMLCanvasElement) => {\n      const undoCursor = crs.current;\n      if (!context) {\n        console.error(\"Context not initialised\");\n        return false;\n      }\n      if (undoCursor !== 0) {\n        stack.current = stack.current.slice(0, -undoCursor);\n        crs.current = 0;\n      }\n      const blob = await new Promise<Blob | null>((resolve) =>\n        canvas.toBlob(resolve)\n      );\n      if (blob) {\n        stack.current.push(blob);\n      }\n      if (size && stack.current.length > size) {\n        stack.current = stack.current.slice(-size);\n      }\n      setCanUndo(stack.current.length > 1);\n      setCanRedo(false);\n      return true;\n    },\n    [crs, stack, context]\n  );\n  const undo = useCallback(async () => {\n    const undoCursor = crs.current;\n\n    if (!context) {\n      console.error(\"Context not initialised\");\n      return false;\n    }\n    if (undoCursor + 1 >= stack.current.length) {\n      console.log(\"nope\");\n      return false;\n    }\n\n    await applyImage(\n      context,\n      stack.current[stack.current.length - (undoCursor + 2)]\n    );\n    crs.current++;\n    setCanUndo(crs.current + 1 < stack.current.length);\n    setCanRedo(true);\n    return true;\n  }, [crs, stack, context]);\n\n  const redo = useCallback(async () => {\n    const undoCursor = crs.current;\n\n    if (!context) {\n      console.error(\"Context not initialised\");\n      return false;\n    }\n    if (undoCursor <= 0) {\n      return false;\n    }\n\n    await applyImage(context, stack.current[stack.current.length - undoCursor]);\n    crs.current--;\n    setCanUndo(crs.current + 1 < stack.current.length);\n    setCanRedo(crs.current > 0);\n    return true;\n  }, [stack, crs, context]);\n\n  const clear = useCallback(() => {\n    stack.current = [];\n  }, [stack]);\n\n  const history = useMemo<History>(\n    () => ({\n      setContext: (context: CanvasRenderingContext2D) => {\n        setContext(context);\n      },\n      pushState,\n    }),\n    [setContext, pushState]\n  );\n\n  return { history, undo, redo, clear, canUndo, canRedo };\n}\n"],"names":["varyColour","sourceColour","varyBrightness","amount","Math","round","random","alpha","tinycolor","darken","setAlpha","toPercentageRgbString","rotatePoint","distance","angle","origin","cos","sin","circleCursor","diameter","btoa","circleSVG","circleDataUri","useBrush","color","strokeWidth","useState","brush","setBrush","currentAngle","useRef","lastPoint","name","startStroke","useCallback","point","current","undefined","colour","bristleCount","gap","i","push","thickness","makeBrush","continueStroke","newPoint","context","newAngle","oldAngle","destination","bearing","atan2","PI","angleB","twoPi","diff","bristles","forEach","bristle","beginPath","controlPoint","moveTo","strokeStyle","lineWidth","lineCap","lineJoin","shadowColor","shadowBlur","quadraticCurveTo","lineTo","stroke","strokeBristle","drawStroke","cursor","useMarker","offset","globalAlpha","useAirbrush","globalCompositeOperation","console","log","endStroke","useShadingBrush","neighbourColor","distanceThreshold","neighbourStrokeWidth","spreadFactor","points","threshold","length","dx","dy","spareRandom","normalRandom","val","u","v","s","mul","sqrt","subdivideVertex","currentPoint","nextPoint","depth","variance","vdiv","midY","newMidpoint","newPoints","splodgeAtPoint","width","sides","radius","deformPolygon","centre","increment","result","makePolygon","getSplodge","closePath","fill","splodgeTrail","trail","count","min","useWatercolor","fillStyle","useEraser","usePencil","opacity","variation","useCharcoal","roughness","floor","offsetX","offsetY","useCalligraphy","lastTime","Date","now","currentTime","timeDelta","max","speed","strokeAngle","angleDiff","abs","normalizedAngle","angleMultiplier","speedMultiplier","currentWidth","useInkPen","flow","pressure","targetPressure","midX","useOilPaint","blending","baseColor","variedColor","lighten","toString","useAcrylic","textureVariation","controlPoint1X","controlPoint1Y","controlPoint2X","controlPoint2Y","bezierCurveTo","useCrayon","offsetRadius","useSmudge","strength","canvas","sourceImageData","x","y","height","getImageData","tempCanvas","document","createElement","tempContext","getContext","putImageData","factor","drawImage","getTouchPoint","event","currentTarget","rect","getBoundingClientRect","touch","targetTouches","clientX","left","clientY","top","getMousePoint","nativeEvent","mouseButtonIsDown","buttons","Artboard","forwardRef","ref","tool","style","history","onStartStroke","onContinueStroke","onEndStroke","props","setContext","setCanvas","drawing","setDrawing","save","restore","pushState","mouseMove","touchMove","mouseDown","preventDefault","touchStart","clear","fillRect","gotRef","canvasRef","offsetWidth","offsetHeight","ctx","mouseEnter","mouseLeave","useEffect","handleGlobalMouseMove","handleGlobalMouseUp","addEventListener","removeEventListener","useImperativeHandle","download","filename","type","a","href","toDataURL","click","getImageAsDataUri","_jsx","touchAction","onTouchStart","onMouseDown","onMouseEnter","onMouseMove","onTouchMove","onMouseUp","onMouseOut","onTouchEnd","applyImage","blob","img","Image","onload","URL","revokeObjectURL","src","createObjectURL","useHistory","size","stack","crs","canUndo","setCanUndo","canRedo","setCanRedo","undoCursor","slice","Promise","resolve","toBlob","error","undo","redo","useMemo"],"mappings":"8MAGgBA,EACdC,EACAC,GAEA,IAAMC,EAASC,KAAKC,MAAMD,KAAKE,SAAWJ,GACpCK,EAAQ,EAAIH,KAAKE,SAAW,EAGlC,OAFeE,EAAUP,GACHQ,OAAON,EAASD,EAAiB,GAAGQ,SAASH,GACrDI,4BASHC,EAAc,SACzBC,EACAC,EACAC,SACU,CACVA,EAAO,GAAKF,EAAWT,KAAKY,IAAIF,GAChCC,EAAO,GAAKF,EAAWT,KAAKa,IAAIH,cCdlBI,EAAaC,GAC3B,sBAL4BA,GAC5B,mCAAoCC,cATZD,GACxB,wDAAyDA,eAAqBA,oBAA0BA,MAAYA,kBAClHA,EAAW,WACJA,EAAW,WAClBA,EAAW,oEAK4BE,CAAUF,IAIrCG,CAAcH,QAAcA,EAAW,MACnDA,EAAW,yBCoFCI,aACdC,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACdvB,eAAAA,aAAiB,MAESwB,EAAgB,IAAnCC,OAAOC,OACRC,EAAeC,IACfC,EAAYD,IA0ClB,MAAO,CAAEE,KAAM,aAAcC,YAxCTC,EAClB,SAACC,GACCN,EAAaO,aAAUC,EACvBT,EArGN,SACEH,EACAa,EACApC,GAKA,IAHA,IAAMyB,EAAe,GACfY,EAAenC,KAAKC,MAAMoB,EAAc,GACxCe,EAAMf,EAAcc,EACjBE,EAAI,EAAGA,EAAIF,EAAcE,IAAK,CACrC,IAAM5B,EACE,IAAN4B,EAAU,EAAID,EAAMC,EAAKrC,KAAKE,SAAWkC,EAAO,EAAIA,EAAM,EAC5Db,EAAMe,KAAK,CACT7B,SAAAA,EACA8B,UAA2B,EAAhBvC,KAAKE,SAAe,EAC/BgC,OAAQtC,EAAWsC,EAAQpC,KAG/B,OAAOyB,EAoFMiB,CAAUnB,EAAaD,EAAOtB,IACvC6B,EAAUK,QAAUD,GAEtB,CAACP,EAAUH,EAAaD,EAAOtB,IAkCS2C,eA/BnBX,EACrB,SAACY,EAAiBC,GAChB,GAAKhB,EAAUK,QAAf,CAIA,IAAMY,GFrFVC,EEwFMpB,EAAaO,QFhGMrB,EE8FnBgB,EAAUK,QF9FwBc,EE+FlCJ,EFrFAK,GATL/C,KAAKgD,MAAMF,EAAY,GAAKnC,EAAO,GAAImC,EAAY,GAAKnC,EAAO,IAC9DX,KAAKiD,GAAK,IACD,EAAVjD,KAAKiD,SAQkB,IAAbJ,EACFE,EAEFF,GAGiCK,EAHFH,EAIhCI,EAAkB,EAAVnD,KAAKiD,IACbG,GALsBP,GAMdK,EAAS,EAAIA,EAASA,EAASC,GAASnD,KAAKiD,IAAME,EAC/DnD,KAAKiD,KACQjD,KAAKiD,GAAKG,EAAOD,EAAQC,SE4EA,IAAzB3B,EAAaO,UACtBP,EAAaO,QAAUY,GAAsB,EAAV5C,KAAKiD,KA1E7B,SACjBI,EACA1C,EACAmC,EACAD,EACAD,EACAvB,EACAsB,GAEAU,EAASC,QAAQ,SAACC,GAChBZ,EAAQa,YAnCU,SACpB7C,EACAmC,EACAS,EACAE,EACAd,GAEAA,EAAQa,YACRb,EAAQe,OAAO/C,EAAO,GAAIA,EAAO,IACjCgC,EAAQgB,YAAcJ,EAAQrB,OAC9BS,EAAQiB,UAAYL,EAAQhB,UAC5BI,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQoB,YAAcR,EAAQrB,OAC9BS,EAAQqB,WAAaT,EAAQhB,UAAY,EACzCI,EAAQsB,iBACNR,EAAa,GACbA,EAAa,GACbX,EAAY,GACZA,EAAY,IAEdH,EAAQuB,OAAOpB,EAAY,GAAIA,EAAY,IAC3CH,EAAQwB,SA+BNC,CAjBsB5D,EACpB+C,EAAQ9C,SAAWY,EAAc,EACjCwB,EACAlC,GAGyBH,EACzB+C,EAAQ9C,SAAWY,EAAc,EACjCuB,EACAE,GAWAS,EATmB/C,EACnB+C,EAAQ9C,SAAWY,EAAc,EACjCuB,EACAjC,GAQAgC,KA2CA0B,CACE9C,EACAI,EAAUK,QACVU,EACAjB,EAAaO,QACbY,EACAvB,EACAsB,GAEFlB,EAAaO,QAAUY,GAAsB,EAAV5C,KAAKiD,IACxCtB,EAAUK,QAAUU,OArBlBf,EAAUK,QAAUU,EFzEH,IAAiBQ,EAClCC,EACAC,EAnBmBzC,EAAemC,EAQxCD,EAEME,GEuGJ,CAACxB,EAAOF,IAKgDiD,OAF3CxD,EAAaO,aCvIdkD,aACdnD,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,KAERM,EAAYD,IA8ClB,MAAO,CAAEE,KAAM,SAAUC,YA5CLC,EAClB,SAACC,EAAcY,GACbA,EAAQiB,UAAY,EACpBjB,EAAQmB,SAAWnB,EAAQkB,QAAU,QACrClC,EAAUK,QAAUD,EACpBY,EAAQgB,YAAcvC,GAExB,CAACA,IAqCmCqB,eAlCfX,EACrB,SAACY,EAAiBC,GAChB,GAAKhB,EAAUK,SAIf,GACEL,EAAUK,QAAQ,KAAOU,EAAS,IAClCf,EAAUK,QAAQ,KAAOU,EAAS,GAFpC,CAMAC,EAAQa,YAER,IAAK,IAAInB,EAAI,EAAGA,EAAIhB,EAAagB,GAAK,EAAG,CACvC,IAAMmC,EAASxE,KAAKC,MAAMoB,EAAc,EAAIgB,GAC5CM,EAAQ8B,YAAe,EAAIpD,GAAgBA,EAAcgB,GACzDM,EAAQe,OACN/B,EAAUK,QAAQ,GAAKwC,EACvB7C,EAAUK,QAAQ,GAAKwC,GAEzB7B,EAAQuB,OAAOxB,EAAS,GAAK8B,EAAQ9B,EAAS,GAAK8B,GACnD7B,EAAQwB,SAEVxB,EAAQ8B,YAAc,EACtB9B,EAAQa,YAER7B,EAAUK,QAAUU,QAxBlBf,EAAUK,QAAUU,GA0BxB,CAACrB,EAAaM,IAKsC2C,OAFvCxD,EAAaO,aChDdqD,aACdtD,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,KAERQ,EAAcC,EAClB,SAACC,EAAcY,GACbA,EAAQgC,yBAA2B,SACnChC,EAAQiB,UAAYvC,EACpBsB,EAAQmB,SAAWnB,EAAQkB,QAAU,QACrClB,EAAQgB,YAAcvC,EACtBuB,EAAQqB,WAA2B,GAAd3C,EACrBsB,EAAQoB,YAAc3D,EAAUgB,GAC7Bd,SAAS,IACTC,wBACHqE,QAAQC,IAAIlC,EAAQoB,aACpBpB,EAAQe,OAAO3B,EAAM,GAAIA,EAAM,IAC/BY,EAAQa,aAEV,CAACpC,EAAOC,IAGJyD,EAAYhD,EAAY,SAACa,GAC7BA,EAAQgC,yBAA2B,eAClC,IAYH,MAAO,CAAE/C,KAAM,WAAYC,YAAAA,EAAaY,eAVjBX,EACrB,SAACC,EAAcY,GACbA,EAAQuB,OAAOnC,EAAM,GAAIA,EAAM,IAC/BY,EAAQwB,UAEV,IAKsDW,UAAAA,EAAWR,OAFpDxD,EAAaO,sUC9Bd0D,aACd3D,MAAAA,aAAQ,YACR4D,IAAAA,mBACAC,kBAAAA,aAAoB,SACpBC,qBAAAA,aAAuB,QACvBC,aAAAA,aAAe,KAEfH,IAAAA,EAAmB5E,EAAUgB,GAAOd,SAAS,IAAKC,yBAClD,IAAM6E,EAAS1D,EAAqB,IAC9B2D,EAAYJ,EAAoBA,EAqDtC,MAAO,CAAErD,KAAM,UAAWC,YAnDNC,EAClB,SAACC,EAAcY,GACbA,EAAQgC,yBAA2B,SACnChC,EAAQiB,UAAY,EACpBjB,EAAQmB,SAAWnB,EAAQkB,QAAU,QACrCuB,EAAOpD,QAAU,CAACD,IAEpB,IA4CqCU,eAzChBX,EACrB,SAACY,EAAiBC,GAChBA,EAAQgB,YAAcvC,EACtBuB,EAAQiB,UAAY,EAEpBwB,EAAOpD,QAAQM,KAAKI,GACpBC,EAAQa,kBACe4B,EAAOpD,QAAQoD,EAAOpD,QAAQsD,OAAS,GAC9D3C,EAAQe,kBACRf,EAAQuB,aAARvB,EAAkBD,GAClBC,EAAQwB,SACRxB,EAAQiB,UAAYsB,EAEpB,qrBAAoBE,EAAOpD,wBAAS,KAAzBD,UACHwD,EAAKxD,EAAM,GAAKW,EAAS,GACzB8C,EAAKzD,EAAM,GAAKW,EAAS,GACzBjC,EAAW8E,EAAKA,EAAKC,EAAKA,EAE5B/E,EAAW4E,GAAarF,KAAKE,SAAWO,EAAW4E,IACrD1C,EAAQa,YACRb,EAAQgB,YAAcqB,EACtBrC,EAAQe,OACNhB,EAAS,GAAK6C,EAAKJ,EACnBzC,EAAS,GAAK8C,EAAKL,GAErBxC,EAAQuB,OACNnC,EAAM,GAAKwD,EAAKJ,EAChBpD,EAAM,GAAKyD,EAAKL,GAElBxC,EAAQwB,YAId,CAACe,EAAsB9D,EAAO+D,EAAcE,EAAWL,IAQFF,UALrChD,EAAY,SAACa,GAC7BA,EAAQgC,yBAA2B,eAClC,IAG+DL,OAFnD,aCvEjB,IAAImB,EAA6B,KAGjC,SAASC,IACP,IAAIC,EAAKC,EAAGC,EAAGC,EAAGC,EAClB,GAAoB,OAAhBN,EACFE,EAAMF,EACNA,EAAc,SACT,CACL,GAGEK,GAFAF,EAAoB,EAAhB5F,KAAKE,SAAe,GAEhB0F,GADRC,EAAoB,EAAhB7F,KAAKE,SAAe,GACR2F,QACH,IAANC,GAAWA,GAAK,GAEzBH,EAAMC,GADNG,EAAM/F,KAAKgG,MAAO,EAAIhG,KAAK6E,IAAIiB,GAAMA,IAErCL,EAAcI,EAAIE,EAEpB,OAAOJ,EAoCT,SAASM,EACPC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIF,EAAQ,EACV,MAAO,GAGT,IACMG,GAAQL,EAAa,GAAKC,EAAU,IAAM,EAG1CK,EAAqB,EAJbN,EAAa,GAAKC,EAAU,IAAM,EAKvCT,IAAiBW,EACxBE,EAAOb,IAAiBW,GAGpBI,EAAYR,EAChBC,EACAM,EACAJ,EAAQ,EACRC,EAAWC,EACXA,GAOF,OAJAG,EAAUnE,KAAKkE,GACfC,EAAUnE,WAAVmE,EACKR,EAAgBO,EAAaL,EAAWC,EAAQ,EAAGC,EAAWC,EAAMA,IAElEG,WAWOC,EACd3E,EACAY,EACAgE,GAEAhE,EAAQa,qBAZRzB,EACA6E,EACAC,GAEA,gBAzDAzB,EACAgB,EACAC,EACAC,GAGA,IADA,IAAMG,EAA0B,GACvBpE,EAAI,EAAGA,EAAI+C,EAAOE,OAAQjD,IAAK,CACtC,IAAM6D,EAAed,EAAO/C,GACtB8D,EAAYf,GAAQ/C,EAAI,GAAK+C,EAAOE,QAC1CmB,EAAUnE,KAAK4D,GACfO,EAAUnE,WAAVmE,EACKR,EAAgBC,EAAcC,EA8CmB,EA9CDE,EA8CiB,IA3CxE,OAAOI,EA2CAK,UAzEPC,EACAH,EACAC,GAIA,IAFA,IAAMG,EAAuB,EAAVhH,KAAKiD,GAAU2D,EAC5BK,EAAuB,GACpB5E,EAAI,EAAGA,GAAKuE,EAAOvE,IAC1B4E,EAAO3E,KAAK,CACVuE,EAAS7G,KAAKY,IAAIoG,EAAY3E,GAAK0E,EAAO,GAC1CF,EAAS7G,KAAKa,IAAImG,EAAY3E,GAAK0E,EAAO,KAG9C,OAAOE,EA6DcC,CAAYnF,EAAO6E,EAAOC,GAAS,EAAGA,EAAS,IASpEM,CAAWpF,EAAO/B,KAAKC,MAAM0G,EAAQ,GAAIA,GAAOrD,QAAQ,SAACvB,GACvDY,EAAQuB,aAARvB,EAAkBZ,KAEpBY,EAAQyE,YACRzE,EAAQ0E,gBAGMC,EACdlC,EACAuB,EACAY,EACA5E,GAGA,IADA,IAAM6E,EAAQxH,KAAKyH,IAAIF,EAAOnC,EAAOE,OAAS,GACrCjD,EAAI,EAAGA,EAAImF,EAAOnF,IACzBM,EAAQ8B,YAAc,IAAQ,KAAQ+C,EAASnF,EAC/CqE,EACEtB,EAAOA,EAAOE,OAAa,EAAJjD,EAAQ,GAC/BM,EACAgE,EAASA,EAAQa,EAASnF,GAG9BM,EAAQ8B,YAAc,YCpHRiD,aACdtG,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,KAER+D,EAAS1D,EAAqB,IAE9BG,EAAcC,EAClB,SAACC,EAAcY,GACbA,EAAQgF,UAAYvG,EACpBuB,EAAQoB,YAAc3C,EACtBuB,EAAQ8B,YAAc,IACtBW,EAAOpD,QAAU,CAACD,GAClBuF,EAAalC,EAAOpD,QAAuB,IAAdX,EAAmB,EAAGsB,IAErD,CAACvB,EAAOC,IAGJyD,EAAYhD,EAAY,WAC5BsD,EAAOpD,QAAU,IAChB,IAYH,MAAO,CAAEJ,KAAM,aAAcC,YAAAA,EAAaY,eAVnBX,EACrB,SAACC,EAAcY,GACbyC,EAAOpD,QAAQM,KAAKP,GACpBuF,EAAalC,EAAOpD,QAASX,EAAa,EAAGsB,IAE/C,CAACtB,IAKuDyD,UAAAA,EAAWR,OAFtDxD,EAAaO,aC/BduG,aAAYvG,YAAAA,aAAc,KAwBxC,MAAO,CAAEO,KAAM,SAAUC,YAvBLC,EAClB,SAACC,EAAcY,GACbA,EAAQgC,yBAA2B,cAEnChC,EAAQiB,UAAYvC,EACpBsB,EAAQgB,YAAc,UACtBhB,EAAQmB,SAAWnB,EAAQkB,QAAU,QACrClB,EAAQe,OAAO3B,EAAM,GAAIA,EAAM,IAC/BY,EAAQa,aAEV,CAACnC,IAamCoB,eAVfX,EACrB,SAACC,EAAcY,GACbA,EAAQuB,OAAOnC,EAAM,GAAIA,EAAM,IAC/BY,EAAQwB,UAEV,IAKoDG,OAFvCxD,EAAaO,aCpBdwG,aACdzG,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,QACdyG,QAAAA,aAAU,KAkCV,MAAO,CAAElG,KAAM,SAAUC,YAhCLC,EAClB,SAACC,EAAcY,GACbA,EAAQ8B,YAAcqD,EACtBnF,EAAQiB,UAAYvC,EACpBsB,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQgC,yBAA2B,WACnChC,EAAQe,OAAO3B,EAAM,GAAIA,EAAM,IAC/BY,EAAQa,aAEV,CAACpC,EAAOC,EAAayG,IAqBerF,eAlBfX,EACrB,SAACC,EAAcY,GAEb,IAAMoF,EAAoC,IAAvB/H,KAAKE,SAAW,IACnCyC,EAAQiB,UAAYvC,EAAc0G,EAClCpF,EAAQuB,OAAOnC,EAAM,GAAIA,EAAM,IAC/BY,EAAQwB,UAEV,CAAC9C,IAUmDyD,UAPpChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,EACtB9B,EAAQgC,yBAA2B,eAClC,IAI8DL,OAFlDxD,EAAaO,aCnCd2G,aACd5G,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACd4G,UAAAA,aAAY,KAENtG,EAAYD,IAqDlB,MAAO,CAAEE,KAAM,WAAYC,YAnDPC,EAClB,SAACC,EAAcY,GACbA,EAAQ8B,YAAc,GACtB9B,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQgC,yBAA2B,WACnChD,EAAUK,QAAUD,GAEtB,CAACX,IA0CqCqB,eAvCjBX,EACrB,SAACC,EAAcY,GACb,GAAKhB,EAAUK,QAAf,CAOA,IADA,IAAMG,EAAenC,KAAKkI,MAAM7G,EAAc,GACrCgB,EAAI,EAAGA,EAAIF,EAAcE,IAAK,CACrCM,EAAQa,YAGR,IAAM2E,GAAWnI,KAAKE,SAAW,IAAOmB,EAAc4G,EAChDG,GAAWpI,KAAKE,SAAW,IAAOmB,EAAc4G,EAGtDtF,EAAQiB,UAA4B,EAAhB5D,KAAKE,SAAe,EAExCyC,EAAQe,OACN/B,EAAUK,QAAQ,GAAKmG,EACvBxG,EAAUK,QAAQ,GAAKoG,GAEzBzF,EAAQuB,OAAOnC,EAAM,GAAKoG,EAASpG,EAAM,GAAKqG,GAC9CzF,EAAQwB,SAGVxC,EAAUK,QAAUD,OAxBlBJ,EAAUK,QAAUD,GA0BxB,CAACV,EAAa4G,IAUwCnD,UAPtChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,EACtB9B,EAAQgC,yBAA2B,eAClC,IAIgEL,OAFpDxD,EAAaO,aCxDdgH,aACdjH,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACdX,MAAAA,aAAQ,KAEFiB,EAAYD,IACZ4G,EAAW5G,IAsDjB,MAAO,CAAEE,KAAM,cAAeC,YApDVC,EAClB,SAACC,EAAcY,GACbA,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnC,EAAUK,QAAUD,EACpBuG,EAAStG,QAAUuG,KAAKC,OAE1B,CAACpH,IA4CwCqB,eAzCpBX,EACrB,SAACC,EAAcY,GACb,IAAKhB,EAAUK,UAAYsG,EAAStG,QAGlC,OAFAL,EAAUK,QAAUD,OACpBuG,EAAStG,QAAUuG,KAAKC,OAI1B,IAAMC,EAAcF,KAAKC,MACnBE,EAAY1I,KAAK2I,IAAIF,EAAcH,EAAStG,QAAS,GAGrDuD,EAAKxD,EAAM,GAAKJ,EAAUK,QAAQ,GAClCwD,EAAKzD,EAAM,GAAKJ,EAAUK,QAAQ,GAElC4G,EADW5I,KAAKgG,KAAKT,EAAKA,EAAKC,EAAKA,GACjBkD,EAGnBG,EAAc7I,KAAKgD,MAAMwC,EAAID,GAC7BuD,EAAY9I,KAAK+I,IAAIF,EAAenI,EAAQV,KAAKiD,GAAK,KACtD+F,EAAkBhJ,KAAKyH,IAAIqB,EAAW9I,KAAKiD,GAAK6F,GAGhDG,EAA8C,GAA5BjJ,KAAKa,IAAImI,GAAyB,GACpDE,EAAkBlJ,KAAK2I,IAAI,GAAK,EAAY,IAARC,GACpCO,EAAe9H,EAAc4H,EAAkBC,EAErDvG,EAAQa,YACRb,EAAQiB,UAAYuF,EACpBxG,EAAQe,OAAO/B,EAAUK,QAAQ,GAAIL,EAAUK,QAAQ,IACvDW,EAAQuB,OAAOnC,EAAM,GAAIA,EAAM,IAC/BY,EAAQwB,SAERxC,EAAUK,QAAUD,EACpBuG,EAAStG,QAAUyG,GAErB,CAACpH,EAAaX,IAK2C4D,OAF5CxD,EAAaO,aC1Dd+H,aACdhI,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,QACdgI,KAAAA,aAAO,KAED1H,EAAYD,IACZ4H,EAAW5H,EAAe,GAyDhC,MAAO,CAAEE,KAAM,UAAWC,YAvDNC,EAClB,SAACC,EAAcY,GACbA,EAAQ8B,YAAc4E,EACtB1G,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQoB,YAAc3C,EACtBuB,EAAQqB,WAAa,EACrBrC,EAAUK,QAAUD,EACpBuH,EAAStH,QAAU,IAErB,CAACZ,EAAOiI,IA4C6B5G,eAzChBX,EACrB,SAACC,EAAcY,GACb,GAAKhB,EAAUK,QAAf,CAMA,IAAMuD,EAAKxD,EAAM,GAAKJ,EAAUK,QAAQ,GAClCwD,EAAKzD,EAAM,GAAKJ,EAAUK,QAAQ,GAClCvB,EAAWT,KAAKgG,KAAKT,EAAKA,EAAKC,EAAKA,GAGpC+D,EAAiBvJ,KAAK2I,IAAI,GAAK3I,KAAKyH,IAAI,EAAG,EAAe,IAAXhH,IACrD6I,EAAStH,QAA6B,GAAnBsH,EAAStH,QAAiC,GAAjBuH,EAE5C,IAAMJ,EAAe9H,EAAciI,EAAStH,QAE5CW,EAAQa,YACRb,EAAQiB,UAAYuF,EAGpB,IAAMK,GAAQ7H,EAAUK,QAAQ,GAAKD,EAAM,IAAM,EAC3CwE,GAAQ5E,EAAUK,QAAQ,GAAKD,EAAM,IAAM,EAEjDY,EAAQe,OAAO/B,EAAUK,QAAQ,GAAIL,EAAUK,QAAQ,IACvDW,EAAQsB,iBAAiBtC,EAAUK,QAAQ,GAAIL,EAAUK,QAAQ,GAAIwH,EAAMjD,GAC3E5D,EAAQwB,SAERxC,EAAUK,QAAUD,OA1BlBJ,EAAUK,QAAUD,GA4BxB,CAACV,IAUoDyD,UAPrChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,EACtB9B,EAAQqB,WAAa,GACpB,IAI+DM,OAFnDxD,EAAaO,aC5DdoI,aACdrI,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACdqI,SAAAA,aAAW,KAEL/H,EAAYD,IAoElB,MAAO,CAAEE,KAAM,YAAaC,YAlERC,EAClB,SAACC,EAAcY,GACbA,EAAQ8B,YAAc,GACtB9B,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQgC,yBAA2B,cACnChD,EAAUK,QAAUD,GAEtB,CAACX,IAyDsCqB,eAtDlBX,EACrB,SAACC,EAAcY,GACb,GAAKhB,EAAUK,QAAf,CAOA,IADA,IACSK,EAAI,EAAGA,EADK,EACaA,IAAK,CACrCM,EAAQa,YAGR,IAAMmG,EAAYvJ,EAAUgB,GACtB2G,EAAoC,IAAvB/H,KAAKE,SAAW,IAC7B0J,EAAcD,EAAUE,QAAQ9B,GAAW+B,WAEjDnH,EAAQgB,YAAciG,EACtBjH,EAAQiB,UAAYvC,EAAsC,GAAvBrB,KAAKE,SAAW,IAGnD,IAAMiI,GAAWnI,KAAKE,SAAW,IAAOmB,EAAc,GAChD+G,GAAWpI,KAAKE,SAAW,IAAOmB,EAAc,GAEtDsB,EAAQe,OACN/B,EAAUK,QAAQ,GAAKmG,EACvBxG,EAAUK,QAAQ,GAAKoG,GAEzBzF,EAAQuB,OAAOnC,EAAM,GAAKoG,EAASpG,EAAM,GAAKqG,GAG1C/F,EAAI,GACNM,EAAQgC,yBAA2B,WACnChC,EAAQ8B,YAAyB,GAAXiF,IAEtB/G,EAAQgC,yBAA2B,cACnChC,EAAQ8B,YAAc,IAGxB9B,EAAQwB,SAGVxC,EAAUK,QAAUD,OAvClBJ,EAAUK,QAAUD,GAyCxB,CAACX,EAAOC,EAAaqI,IAUkC5E,UAPvChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,EACtB9B,EAAQgC,yBAA2B,eAClC,IAIiEL,OAFrDxD,EAAaO,aCxEd0I,aACd3I,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACdyG,QAAAA,aAAU,KAEJnG,EAAYD,IAiElB,MAAO,CAAEE,KAAM,UAAWC,YA/DNC,EAClB,SAACC,EAAcY,GACbA,EAAQ8B,YAAcqD,EACtBnF,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQgC,yBAA2B,cACnChD,EAAUK,QAAUD,GAEtB,CAACX,EAAO0G,IAsD6BrF,eAnDhBX,EACrB,SAACC,EAAcY,GACb,GAAKhB,EAAUK,QAAf,CAMAW,EAAQa,YACRb,EAAQiB,UAAYvC,EAGpB,IAAM2I,EAA2C,GAAvBhK,KAAKE,SAAW,IAC1CyC,EAAQiB,UAAY5D,KAAK2I,IAAI,EAAGtH,EAAc2I,GAG9C,IAAMC,EAAiBtI,EAAUK,QAAQ,GAAyC,IAAnCD,EAAM,GAAKJ,EAAUK,QAAQ,IACtEkI,EAAiBvI,EAAUK,QAAQ,GAAyC,IAAnCD,EAAM,GAAKJ,EAAUK,QAAQ,IACtEmI,EAAiBxI,EAAUK,QAAQ,GAAyC,IAAnCD,EAAM,GAAKJ,EAAUK,QAAQ,IACtEoI,EAAiBzI,EAAUK,QAAQ,GAAyC,IAAnCD,EAAM,GAAKJ,EAAUK,QAAQ,IAE5EW,EAAQe,OAAO/B,EAAUK,QAAQ,GAAIL,EAAUK,QAAQ,IACvDW,EAAQ0H,cACNJ,EAAgBC,EAChBC,EAAgBC,EAChBrI,EAAM,GAAIA,EAAM,IAElBY,EAAQwB,SAGJnE,KAAKE,SAAW,KAClByC,EAAQa,YACRb,EAAQ8B,YAAwB,GAAVqD,EACtBnF,EAAQiB,UAA0B,GAAdvC,EACpBsB,EAAQe,OAAO/B,EAAUK,QAAQ,GAAIL,EAAUK,QAAQ,IACvDW,EAAQuB,OAAOnC,EAAM,GAAIA,EAAM,IAC/BY,EAAQwB,SACRxB,EAAQ8B,YAAcqD,GAGxBnG,EAAUK,QAAUD,OArClBJ,EAAUK,QAAUD,GAuCxB,CAACV,EAAayG,IASuChD,UANrChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,GACrB,IAI+DH,OAFnDxD,EAAaO,aCpEdiJ,aACdlJ,MAAAA,aAAQ,gBACRC,YAAAA,aAAc,SACdiI,SAAAA,aAAW,KAEL3H,EAAYD,IA0DlB,MAAO,CAAEE,KAAM,SAAUC,YAxDLC,EAClB,SAACC,EAAcY,GACbA,EAAQ8B,YAAc6E,EACtB3G,EAAQgB,YAAcvC,EACtBuB,EAAQkB,QAAU,QAClBlB,EAAQmB,SAAW,QACnBnB,EAAQgC,yBAA2B,WACnChD,EAAUK,QAAUD,GAEtB,CAACX,EAAOkI,IA+C4B7G,eA5CfX,EACrB,SAACC,EAAcY,GACb,GAAKhB,EAAUK,QAAf,CAOA,IADA,IACSK,EAAI,EAAGA,EADO,EACaA,IAAK,CACvCM,EAAQa,YAGR,IAAM+G,EAA6B,GAAdlJ,EACfX,EAAS2B,EANM,EAMgBrC,KAAKiD,GAAK,EACzCkF,EAAUnI,KAAKY,IAAIF,GAAS6J,EAAevK,KAAKE,SAChDkI,EAAUpI,KAAKa,IAAIH,GAAS6J,EAAevK,KAAKE,SAGtDyC,EAAQiB,UAAY5D,KAAK2I,IAAI,EAAGtH,GAAe,GAAsB,GAAhBrB,KAAKE,WAG1DyC,EAAQ8B,YAAc6E,GAAY,GAAsB,GAAhBtJ,KAAKE,UAE7CyC,EAAQe,OACN/B,EAAUK,QAAQ,GAAKmG,EACvBxG,EAAUK,QAAQ,GAAKoG,GAEzBzF,EAAQuB,OAAOnC,EAAM,GAAKoG,EAASpG,EAAM,GAAKqG,GAC9CzF,EAAQwB,SAGVxC,EAAUK,QAAUD,OA7BlBJ,EAAUK,QAAUD,GA+BxB,CAACV,EAAaiI,IAUsCxE,UAPpChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,EACtB9B,EAAQgC,yBAA2B,eAClC,IAI8DL,OAFlDxD,EAAaO,aC9DdmJ,aACdnJ,YAAAA,aAAc,SACdoJ,SAAAA,aAAW,KAEL9I,EAAYD,IACZgJ,EAAShJ,IACTiJ,EAAkBjJ,IAyFxB,MAAO,CAAEE,KAAM,SAAUC,YAvFLC,EAClB,SAACC,EAAcY,GACbhB,EAAUK,QAAUD,EACpB2I,EAAO1I,QAAUW,EAAQ+H,OAGzB,IAAM7D,EAASxF,EACTuJ,EAAI5K,KAAK2I,IAAI,EAAG5G,EAAM,GAAK8E,GAC3BgE,EAAI7K,KAAK2I,IAAI,EAAG5G,EAAM,GAAK8E,GAC3BF,EAAQ3G,KAAKyH,IAAIiD,EAAO1I,QAAQ2E,MAAQiE,EAAY,EAAT/D,GAC3CiE,EAAS9K,KAAKyH,IAAIiD,EAAO1I,QAAQ8I,OAASD,EAAY,EAAThE,GAE/CF,EAAQ,GAAKmE,EAAS,IACxBH,EAAgB3I,QAAUW,EAAQoI,aAAaH,EAAGC,EAAGlE,EAAOmE,KAGhE,CAACzJ,IAuEmCoB,eApEfX,EACrB,SAACC,EAAcY,GACb,GAAKhB,EAAUK,SAAY2I,EAAgB3I,SAAY0I,EAAO1I,QAA9D,CAKA,IAAMuD,EAAKxD,EAAM,GAAKJ,EAAUK,QAAQ,GAClCwD,EAAKzD,EAAM,GAAKJ,EAAUK,QAAQ,GAGxC,KAFiBhC,KAAKgG,KAAKT,EAAKA,EAAKC,EAAKA,GAE3B,GAAf,CAGA,IAAMwF,EAAaC,SAASC,cAAc,UACpCC,EAAcH,EAAWI,WAAW,MAC1C,GAAKD,EAAL,CAEAH,EAAWrE,MAAsB,EAAdtF,EACnB2J,EAAWF,OAAuB,EAAdzJ,EAGpB8J,EAAYE,aAAaV,EAAgB3I,QAAS,EAAG,GAKrDW,EAAQ8B,YAAcgG,EACtB9H,EAAQgC,yBAA2B,cAGnC,IAAK,IAAItC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMiJ,GAAUjJ,EAAI,GAAK,EAIzBM,EAAQ4I,UACNP,EACAjJ,EAAM,GAAKV,EALGkE,EAAK+F,EAAS,GAM5BvJ,EAAM,GAAKV,EALGmE,EAAK8F,EAAS,GAMd,EAAdjK,EACc,EAAdA,GAKJ,IAAMwF,EAASxF,EACTuJ,EAAI5K,KAAK2I,IAAI,EAAG5G,EAAM,GAAK8E,GAC3BgE,EAAI7K,KAAK2I,IAAI,EAAG5G,EAAM,GAAK8E,GAC3BF,EAAQ3G,KAAKyH,IAAIiD,EAAO1I,QAAQ2E,MAAQiE,EAAY,EAAT/D,GAC3CiE,EAAS9K,KAAKyH,IAAIiD,EAAO1I,QAAQ8I,OAASD,EAAY,EAAThE,GAE/CF,EAAQ,GAAKmE,EAAS,IACxBH,EAAgB3I,QAAUW,EAAQoI,aAAaH,EAAGC,EAAGlE,EAAOmE,IAG9DnJ,EAAUK,QAAUD,SArDlBJ,EAAUK,QAAUD,GAuDxB,CAACV,EAAaoJ,IAUsC3F,UAPpChD,EAAY,SAACa,GAC7BA,EAAQ8B,YAAc,EACtB9B,EAAQgC,yBAA2B,eAClC,IAI8DL,OAFlDxD,EAAaO,ICrGjBmK,IAAAA,EAAgB,SAACC,GAC5B,IAAKA,EAAMC,cACT,MAAO,CAAC,EAAG,GAEb,IAAMC,EAAOF,EAAMC,cAAcE,wBAC3BC,EAAQJ,EAAMK,cAAc,GAClC,MAAO,CAACD,EAAME,QAAUJ,EAAKK,KAAMH,EAAMI,QAAUN,EAAKO,MAG7CC,EAAgB,SAACV,SAAmC,CAC/DA,EAAMW,YAAYjE,QAClBsD,EAAMW,YAAYhE,UAIPiE,EAAoB,SAACC,UADnB,IAAA,EAEHA,ICwBCC,EAAWC,EAAW,WAUjCC,OAREC,IAAAA,KACAC,IAAAA,MACAC,IAAAA,QACAC,IAAAA,cACAC,IAAAA,iBACAC,IAAAA,YACGC,sNAIyB1L,IAAvBqB,OAASsK,SACY3L,IAArBoJ,OAAQwC,SACe5L,GAAS,GAAhC6L,OAASC,OAEVvL,EAAcC,EAClB,SAACC,GACMY,IAGLA,EAAQ0K,OACRD,GAAW,SACXV,EAAK7K,aAAL6K,EAAK7K,YAAcE,EAAOY,SAC1BkK,GAAAA,EAAgB9K,KAElB,CAAC2K,EAAM/J,EAASkK,IAGZpK,EAAiBX,EACrB,SAACY,GACMC,UAGL+J,EAAKjK,gBAALiK,EAAKjK,eAAiBC,EAAUC,SAChCmK,GAAAA,EAAmBpK,KAErB,CAACgK,EAAM/J,EAASmK,IAGZhI,EAAYhD,EAAY,WAC5BsL,GAAW,GACPzK,UACF+J,EAAK5H,WAAL4H,EAAK5H,UAAYnC,SACjBoK,GAAAA,IACApK,EAAQ2K,UACJ5C,GAAUkC,GACZA,EAAQW,UAAU7C,KAGrB,CAACgC,EAAM/J,EAAS+H,EAAQkC,EAASG,IAE9BS,EAAY1L,EAChB,SAAC2J,GACM0B,GAGL1K,EAAe0J,EAAcV,KAE/B,CAAChJ,EAAgB0K,IAGbM,EAAY3L,EAChB,SAAC2J,GACM0B,GAGL1K,EAAe+I,EAAcC,KAE/B,CAAChJ,EAAgB0K,IAGbO,EAAY5L,EAChB,SAAC2J,GACK0B,IAGJ1B,EAAMkC,iBACN9L,EAAYsK,EAAcV,MAE5B,CAAC0B,EAAStL,IAGN+L,EAAa9L,EACjB,SAAC2J,GACK0B,GAGJtL,EAAY2J,EAAcC,KAE5B,CAAC0B,EAAStL,IAGNgM,EAAQ/L,EAAY,WACnBa,GAAY+H,IAGjB/H,EAAQ0K,OACR1K,EAAQgF,UAAY,UACpBhF,EAAQmL,SAAS,EAAG,EAAGpD,EAAO/D,MAAO+D,EAAOI,QAC5CnI,EAAQ2K,UACJ5C,GAAUkC,GACZA,EAAQW,UAAU7C,KAEnB,CAAC/H,EAAS+H,EAAQkC,IAEfmB,EAASjM,EACb,SAACkM,GACC,GAAKA,EAAL,CAGAA,EAAUrH,MAAQqH,EAAUC,YAC5BD,EAAUlD,OAASkD,EAAUE,aAC7B,IAAMC,EAAMH,EAAU5C,WAAW,MACjC8B,EAAUc,GACVf,EAAWkB,GACNA,IAGLA,EAAIxG,UAAY,UAChBwG,EAAIL,SAAS,EAAG,EAAGE,EAAUrH,MAAOqH,EAAUlD,QAC9CqD,EAAIxG,UAAY,cACZiF,IACFA,EAAQK,WAAWkB,GACnBvB,EAAQW,UAAUS,OAGtB,CAACpB,IAGGwB,EAAatM,EACjB,SAAC2J,GAEKY,EAAkBZ,EAAMa,WAAaa,GACvCO,EAAUjC,IAGd,CAAC0B,EAASO,IAGNW,EAAavM,EACjB,SAAC2J,KAID,IAkEF,OA9DA6C,EAAU,WACR,GAAKnB,GAAYzC,EAAjB,CAIA,IAAM6D,EAAwB,SAAC9C,GAC7B,GAAK0B,EAAL,CAIA,IAAMxB,EAAOjB,EAAOkB,wBACd7J,EAAe,CACnB0J,EAAMM,QAAUJ,EAAKK,KACrBP,EAAMQ,QAAUN,EAAKO,MAKCnK,EAAM,GAAK,GAAKA,EAAM,GAAK2I,EAAO/D,OAClC5E,EAAM,GAAK,GAAKA,EAAM,GAAK2I,EAAOI,SAGtD/I,EAAM,KAAO,IAAMA,EAAM,IAAM2I,EAAO/D,MAAQ,IAC9C5E,EAAM,KAAO,IAAMA,EAAM,IAAM2I,EAAOI,OAAS,IACjDrI,EAAeV,KAIbyM,EAAsB,WACtBrB,GACFrI,KAOJ,OAHAmG,SAASwD,iBAAiB,YAAaF,GACvCtD,SAASwD,iBAAiB,UAAWD,cAGnCvD,SAASyD,oBAAoB,YAAaH,GAC1CtD,SAASyD,oBAAoB,UAAWF,MAEzC,CAACrB,EAASzC,EAAQjI,EAAgBqC,IAErC6J,EACElC,EACA,iBAAO,CACLmC,SAAU,SAACC,EAAwBC,GACjC,YADSD,IAAAA,EAAW,aACfnE,EAAL,CAGA,IAAMqE,EAAI9D,SAASC,cAAc,KACjC6D,EAAEC,KAAOtE,EAAOuE,UAAUH,GAC1BC,EAAEH,SAAWC,EACbE,EAAEG,UAEJrB,MAAAA,EACAsB,kBAAmB,SAACL,gBAAkBpE,SAAAA,EAAQuE,UAAUH,IACxDnM,QAAAA,IAEF,CAAC+H,EAAQ/H,EAASkL,IAIlBuB,0BACEzC,SAASrI,aAAQoI,SAAAA,EAAMpI,OAAQ+K,YAAa,QAAW1C,GACvD2C,aAAc1B,EACd2B,YAAa7B,EACb8B,aAAcpB,EACdqB,YAAatC,EAAUK,OAAYvL,EACnCyN,YAAavC,EAAUM,OAAYxL,EACnC0N,UAAW7K,EACX8K,WAAYvB,EACZwB,WAAY/K,EACZ2H,IAAKsB,GACDf,aCvQK8C,WAAWnN,EAAmCoN,OAC3D,IAAMC,EAAM,IAAIC,aAChBD,EAAIE,OAAS,WACXvN,EAAQ+H,OAAO/D,MAAQqJ,EAAIrJ,MAC3BhE,EAAQ+H,OAAOI,OAASkF,EAAIlF,OAC5BnI,EAAQ4I,UAAUyE,EAAK,EAAG,GAC1BG,IAAIC,gBAAgBJ,EAAIK,MAE1BL,EAAIK,IAAMF,IAAIG,gBAAgBP,kEAiBhBQ,EAAWC,GACzB,IAAMC,EAAQ/O,EAAoB,IAC5BgP,EAAMhP,EAAO,KACWJ,IAAvBqB,OAASsK,SACc3L,GAAS,GAAhCqP,OAASC,SACctP,GAAS,GAAhCuP,OAASC,OAEVvD,EAAYzL,WACT4I,OACL,IAAMqG,EAAaL,EAAI1O,QACvB,OAAKW,GAIc,IAAfoO,IACFN,EAAMzO,QAAUyO,EAAMzO,QAAQgP,MAAM,GAAID,GACxCL,EAAI1O,QAAU,mBAEG,IAAIiP,QAAqB,SAACC,UAC3CxG,EAAOyG,OAAOD,oBADVnB,GAWN,OARIA,GACFU,EAAMzO,QAAQM,KAAKyN,GAEjBS,GAAQC,EAAMzO,QAAQsD,OAASkL,IACjCC,EAAMzO,QAAUyO,EAAMzO,QAAQgP,OAAOR,IAEvCI,EAAWH,EAAMzO,QAAQsD,OAAS,GAClCwL,GAAW,UAjBTlM,QAAQwM,MAAM,4CACP,IALgB,oCAwB3B,CAACV,EAAKD,EAAO9N,IAET0O,EAAOvP,iBACX,IAAMiP,EAAaL,EAAI1O,QAEvB,OAAKW,EAIDoO,EAAa,GAAKN,EAAMzO,QAAQsD,QAClCV,QAAQC,IAAI,yBACL,oBAGHiL,EACJnN,EACA8N,EAAMzO,QAAQyO,EAAMzO,QAAQsD,QAAUyL,EAAa,sBAKrD,OAHAL,EAAI1O,UACJ4O,EAAWF,EAAI1O,QAAU,EAAIyO,EAAMzO,QAAQsD,QAC3CwL,GAAW,SAdTlM,QAAQwM,MAAM,4CACP,IALa,oCAoBrB,CAACV,EAAKD,EAAO9N,IAEV2O,EAAOxP,iBACX,IAAMiP,EAAaL,EAAI1O,QAEvB,OAAKW,EAIDoO,GAAc,mBACT,mBAGHjB,EAAWnN,EAAS8N,EAAMzO,QAAQyO,EAAMzO,QAAQsD,OAASyL,qBAI/D,OAHAL,EAAI1O,UACJ4O,EAAWF,EAAI1O,QAAU,EAAIyO,EAAMzO,QAAQsD,QAC3CwL,EAAWJ,EAAI1O,QAAU,SAVvB4C,QAAQwM,MAAM,4CACP,IALa,oCAgBrB,CAACX,EAAOC,EAAK/N,IAEVkL,EAAQ/L,EAAY,WACxB2O,EAAMzO,QAAU,IACf,CAACyO,IAYJ,MAAO,CAAE7D,QAVO2E,EACd,iBAAO,CACLtE,WAAY,SAACtK,GACXsK,EAAWtK,IAEb4K,UAAAA,IAEF,CAACN,EAAYM,IAGG8D,KAAAA,EAAMC,KAAAA,EAAMzD,MAAAA,EAAO8C,QAAAA,EAASE,QAAAA"}